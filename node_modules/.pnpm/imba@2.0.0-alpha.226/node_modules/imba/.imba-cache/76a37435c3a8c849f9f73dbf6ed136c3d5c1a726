{"id":"cj","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};\nconst $afterVisit$ = Symbol.for('#afterVisit'), $insertInto$ = Symbol.for('#insertInto'), $appendChild$ = Symbol.for('#appendChild'), $replaceWith$ = Symbol.for('#replaceWith'), $removeFrom$ = Symbol.for('#removeFrom'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $domFlags$ = Symbol.for('#domFlags'), $$parent$ = Symbol.for('##parent'), $end$ = Symbol.for('#end'), $removeChild$ = Symbol.for('#removeChild'), $insertChild$ = Symbol.for('#insertChild');\nvar $1 = Symbol();\n\n/*body*/\nimport {createComment} from './core';\nimport {Fragment} from './fragment';\n\nclass IndexedTagFragment extends Fragment {\n\t\n\t\n\tconstructor(f,parent){\n\t\t\n\t\tsuper(...arguments);\n\t\tthis[$domFlags$] = f;\n\t\tthis[$$parent$] = parent;\n\t\t\n\t\tif (!(f & 256)) {\n\t\t\t\n\t\t\tthis[$end$] = createComment('list');\n\t\t\t// #end.node = self\n\t\t\t\n\t\t};\n\t\tthis.$ = this.childNodes;\n\t\tthis.length = 0;\n\t\t\n\t\tif (parent) {\n\t\t\t\n\t\t\tparent[$appendChild$](this);\n\t\t\t\n\t\t};this[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\thasChildNodes(){\n\t\t\n\t\tif (this.length == 0) { return false };\n\t\treturn true;\n\t}\n\t\n\t\n\t[$afterVisit$](len){\n\t\t\n\t\tlet from = this.length;\n\t\tthis.length = len;\n\t\t\n\t\tif (from == len) { return };\n\t\tlet par = this.parentNode;\n\t\tif (!(par)) { return };\n\t\t\n\t\tlet array = this.childNodes;\n\t\tlet end = this[$end$];\n\t\t\n\t\tif (from > len) {\n\t\t\t\n\t\t\twhile (from > len){\n\t\t\t\t\n\t\t\t\tpar[$removeChild$](array[--from]);\n\t\t\t};\n\t\t} else if (len > from) {\n\t\t\t\n\t\t\twhile (len > from){\n\t\t\t\t\n\t\t\t\t// console.log 'inserting before now',array[from]\n\t\t\t\tpar[$insertChild$](array[from++],end);\n\t\t\t};\n\t\t};\n\t\tthis.length = len;\n\t\treturn;\n\t\t\n\t}\n\t[$insertInto$](parent,before){\n\t\t\n\t\tthis.parentNode = parent;\n\t\t\n\t\t// if parent isa Node\n\t\t// FIXME need to work with non-dom elements as well\n\t\tif (this[$end$]) {\n\t\t\t\n\t\t\tthis[$end$][$insertInto$](parent,before);\n\t\t\t\n\t\t};\n\t\tbefore = this[$end$];\n\t\t\n\t\tfor (let i = 0, $2 = iter$__(this.childNodes), $3 = $2.length; i < $3; i++) {\n\t\t\tlet item = $2[i];\n\t\t\tif (i == this.length) { break; };\n\t\t\t// log 'insert child',parent,item,before\n\t\t\titem[$insertInto$](parent,before);\n\t\t\t// log 'insert child',parent,item,before,parent.innerHTML\n\t\t};\n\t\treturn this;\n\t\t\n\t}\n\t[$appendChild$](item){\n\t\t\n\t\t// this should be a noop\n\t\t// log 'list #appendChild',item\n\t\treturn;\n\t\t\n\t\t\n\t}\n\t[$replaceWith$](rel,parent){\n\t\t\n\t\tlet res = rel[$insertInto$](parent,this[$end$]);\n\t\tthis[$removeFrom$](parent);\n\t\treturn res;\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\t\n\t\t// log '#removeFrom',parent\n\t\tlet i = this.length;\n\t\twhile (i > 0){\n\t\t\t\n\t\t\tlet el = this.childNodes[--i];\n\t\t\tel[$removeFrom$](parent);\n\t\t\t// parent.#removeChild(el)\n\t\t};\n\t\tif (this[$end$]) { parent.removeChild(this[$end$]) };\n\t\tthis.parentNode = null;\n\t\treturn;\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'IndexedTagFragment');inheritClass$__(this);}\n};\n\nexport function createIndexedList(bitflags,parent){\n\t\n\treturn new IndexedTagFragment(bitflags,parent);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlZC1saXN0LmltYmEiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleGVkLWxpc3QuaW1iYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NyZWF0ZUNvbW1lbnR9IGZyb20gJy4vY29yZSdcbmltcG9ydCB7RnJhZ21lbnR9IGZyb20gJy4vZnJhZ21lbnQnXG5cbmNsYXNzIEluZGV4ZWRUYWdGcmFnbWVudCA8IEZyYWdtZW50XG5cblx0ZGVmIGNvbnN0cnVjdG9yIGYsIHBhcmVudFxuXHRcdHN1cGVyXG5cdFx0I2RvbUZsYWdzID0gZlxuXHRcdCMjcGFyZW50ID0gcGFyZW50XG5cblx0XHR1bmxlc3MgZiAmICRUQUdfTEFTVF9DSElMRCRcblx0XHRcdCNlbmQgPSBjcmVhdGVDb21tZW50KCdsaXN0Jylcblx0XHRcdCMgI2VuZC5ub2RlID0gc2VsZlxuXHRcdFx0XG5cdFx0c2VsZi4kID0gY2hpbGROb2Rlc1xuXHRcdHNlbGYubGVuZ3RoID0gMFxuXHRcdFx0XG5cdFx0aWYgcGFyZW50XG5cdFx0XHRwYXJlbnQuI2FwcGVuZENoaWxkKHNlbGYpXG5cdFx0XHRcblx0ZGVmIGhhc0NoaWxkTm9kZXNcblx0XHRyZXR1cm4gZmFsc2UgaWYgbGVuZ3RoID09IDBcblx0XHRyZXR1cm4gdHJ1ZVxuXG5cblx0ZGVmICNhZnRlclZpc2l0IGxlblxuXHRcdGxldCBmcm9tID0gc2VsZi5sZW5ndGhcblx0XHRzZWxmLmxlbmd0aCA9IGxlblxuXG5cdFx0cmV0dXJuIGlmIGZyb20gPT0gbGVuXG5cdFx0bGV0IHBhciA9IHBhcmVudE5vZGVcblx0XHRyZXR1cm4gaWYgIXBhclxuXG5cdFx0bGV0IGFycmF5ID0gc2VsZi5jaGlsZE5vZGVzXG5cdFx0bGV0IGVuZCA9ICNlbmRcblxuXHRcdGlmIGZyb20gPiBsZW5cblx0XHRcdHdoaWxlIGZyb20gPiBsZW5cblx0XHRcdFx0cGFyLiNyZW1vdmVDaGlsZChhcnJheVstLWZyb21dKVxuXHRcdGVsaWYgbGVuID4gZnJvbVxuXHRcdFx0d2hpbGUgbGVuID4gZnJvbVxuXHRcdFx0XHQjIGNvbnNvbGUubG9nICdpbnNlcnRpbmcgYmVmb3JlIG5vdycsYXJyYXlbZnJvbV1cblx0XHRcdFx0cGFyLiNpbnNlcnRDaGlsZChhcnJheVtmcm9tKytdLGVuZClcblx0XHRzZWxmLmxlbmd0aCA9IGxlblxuXHRcdHJldHVyblxuXHRcdFxuXHRkZWYgI2luc2VydEludG8gcGFyZW50LCBiZWZvcmVcblx0XHRwYXJlbnROb2RlID0gcGFyZW50XG5cdFx0XG5cdFx0IyBpZiBwYXJlbnQgaXNhIE5vZGVcblx0XHQjIEZJWE1FIG5lZWQgdG8gd29yayB3aXRoIG5vbi1kb20gZWxlbWVudHMgYXMgd2VsbFxuXHRcdGlmICNlbmRcblx0XHRcdCNlbmQuI2luc2VydEludG8ocGFyZW50LGJlZm9yZSlcblx0XHRcdFxuXHRcdGJlZm9yZSA9ICNlbmRcblxuXHRcdGZvciBpdGVtLGkgaW4gY2hpbGROb2Rlc1xuXHRcdFx0YnJlYWsgaWYgaSA9PSBzZWxmLmxlbmd0aFxuXHRcdFx0IyBsb2cgJ2luc2VydCBjaGlsZCcscGFyZW50LGl0ZW0sYmVmb3JlXG5cdFx0XHRpdGVtLiNpbnNlcnRJbnRvKHBhcmVudCxiZWZvcmUpXG5cdFx0XHQjIGxvZyAnaW5zZXJ0IGNoaWxkJyxwYXJlbnQsaXRlbSxiZWZvcmUscGFyZW50LmlubmVySFRNTFxuXHRcdHJldHVybiBzZWxmXG5cdFx0XG5cdGRlZiAjYXBwZW5kQ2hpbGQgaXRlbVxuXHRcdCMgdGhpcyBzaG91bGQgYmUgYSBub29wXG5cdFx0IyBsb2cgJ2xpc3QgI2FwcGVuZENoaWxkJyxpdGVtXG5cdFx0cmV0dXJuXG5cdFx0XG5cdFx0XG5cdGRlZiAjcmVwbGFjZVdpdGggcmVsLCBwYXJlbnRcblx0XHRsZXQgcmVzID0gcmVsLiNpbnNlcnRJbnRvKHBhcmVudCwjZW5kKVxuXHRcdCNyZW1vdmVGcm9tKHBhcmVudClcblx0XHRyZXR1cm4gcmVzXG5cdFxuXHRkZWYgI3JlbW92ZUZyb20gcGFyZW50XG5cdFx0IyBsb2cgJyNyZW1vdmVGcm9tJyxwYXJlbnRcblx0XHRsZXQgaSA9IGxlbmd0aFxuXHRcdHdoaWxlIGkgPiAwXG5cdFx0XHRsZXQgZWwgPSBjaGlsZE5vZGVzWy0taV1cblx0XHRcdGVsLiNyZW1vdmVGcm9tKHBhcmVudClcblx0XHRcdCMgcGFyZW50LiNyZW1vdmVDaGlsZChlbClcblx0XHRwYXJlbnQucmVtb3ZlQ2hpbGQoI2VuZCkgaWYgI2VuZFxuXHRcdHBhcmVudE5vZGUgPSBudWxsXG5cdFx0cmV0dXJuXG5cbmV4cG9ydCBkZWYgY3JlYXRlSW5kZXhlZExpc3QgYml0ZmxhZ3MsIHBhcmVudFxuXHRyZXR1cm4gbmV3IEluZGV4ZWRUYWdGcmFnbWVudChiaXRmbGFncyxwYXJlbnQpXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLEVBQUUsYUFBYSxPQUFPLFFBQVE7QUFDcEMsTUFBTSxFQUFFLFFBQVEsT0FBTyxZQUFZOztBQUVuQyxLQUFLLENBQUMsa0JBQWtCLFNBQUcsUUFBUSxFQUFBOzs7Q0FFOUIsV0FBVyxDQUFDLENBQUMsQ0FBRSxNQUFNLENBQUE7O0VBQ3hCLG1CQUFLO2tCQUNJLEdBQUcsQ0FBQztpQkFDTCxHQUFHLE1BQU07O0VBRWpCLEVBQU0sRUFBQyxFQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBZ0IsR0FBQTs7Y0FDdEIsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDOzs7R0FDVjtFQUVuQixJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUEsVUFBVTtFQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7O0VBRWYsRUFBRSxFQUFDLE1BQU0sRUFBQTs7R0FDUixNQUFNLGVBQWEsQ0FBQyxJQUFJLENBQUM7O0dBQUE7RUFBQTtDQUV2QixhQUFhLEVBQUE7O0VBQ0gsRUFBRSxFQUFDLEtBQUEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQTNCLEVBQUEsTUFBTSxDQUFDLEtBQUssRUFBQTtFQUNaLE1BQU0sQ0FBQyxJQUFJO0VBQUE7OztnQkFHSSxHQUFHLENBQUE7O0VBQ2QsSUFBQSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU07RUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHOztFQUVWLEVBQUUsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBckIsRUFBQSxNQUFNO0VBQ0YsSUFBQSxHQUFHLEdBQUcsS0FBQSxVQUFVO0VBQ2IsRUFBRSxFQUFFLEVBQUEsR0FBRyxHQUFkLEVBQUEsTUFBTTs7RUFFRixJQUFBLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVTtFQUN2QixJQUFBLEdBQUcsY0FBTzs7RUFFZCxFQUFFLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUE7O1VBQ04sSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7O0lBQ2YsR0FBRyxlQUFhLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRTtJQUFBO0dBQUEsTUFDakMsRUFBQSxFQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFBOztVQUNSLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBOzs7SUFFZixHQUFHLGVBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQztJQUFBO0dBQUE7RUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHO0VBQ2pCLE1BQU07O0VBQUE7Z0JBRVMsTUFBTSxDQUFFLE1BQU0sQ0FBQTs7RUFDN0IsS0FBQSxVQUFVLEdBQUcsTUFBTTs7OztFQUluQixFQUFFLGFBQUssRUFBQTs7Y0FDRixjQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQzs7R0FBQTtFQUVoQyxNQUFNLGNBQU87O0VBRWIsR0FBRywwQkFBVyxLQUFBLFVBQVUsZ0NBQUE7T0FBcEIsSUFBSTtHQUNELEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNOztHQUV6QixJQUFJLGNBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDOztHQUN5QjtFQUN6RCxNQUFNLENBQUMsSUFBSTs7RUFBQTtpQkFFSyxJQUFJLENBQUE7Ozs7RUFHcEIsTUFBTTs7O0VBQUE7aUJBR1UsR0FBRyxDQUFFLE1BQU0sQ0FBQTs7RUFDdkIsSUFBQSxHQUFHLEdBQUcsR0FBRyxjQUFZLENBQUMsTUFBTSxZQUFLLENBQUM7b0JBQzNCLENBQUMsTUFBTSxDQUFDO0VBQ25CLE1BQU0sQ0FBQyxHQUFHO0VBQUE7O2dCQUVLLE1BQU0sQ0FBQTs7O0VBRWpCLElBQUEsQ0FBQyxHQUFHLEtBQUEsTUFBTTtTQUNSLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBOztHQUNOLElBQUEsRUFBRSxHQUFHLEtBQUEsVUFBVSxHQUFHLENBQUMsQ0FBakI7R0FDTixFQUFFLGNBQVksQ0FBQyxNQUFNLENBQUM7O0dBQ0c7RUFDRCxFQUFFLGFBQUssRUFBaEMsRUFBQSxNQUFNLENBQUMsV0FBVyxZQUFLLENBQUMsRUFBQTtFQUN4QixLQUFBLFVBQVUsR0FBRyxJQUFJO0VBQ2pCLE1BQU07RUFBQTs7O0FBQUEsQ0FBQTs7QUFFUixNQUFNLENBQUMsUUFBRyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBRSxNQUFNLENBQUE7O0NBQzVDLE1BQU0sQ0FBSyxHQUFELENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztDQUFBO0FBQy9DOyJ9","css":""}