{"id":"cs","warnings":[],"errors":[],"js":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\t// @ts-ignore\n\tObject.defineProperties(target,descriptors);\n\treturn target;\n};;\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };\nconst $extendType$ = Symbol.for('#extendType'), $modifierState$ = Symbol.for('#modifierState'), $sharedModifierState$ = Symbol.for('#sharedModifierState'), $onceHandlerEnd$ = Symbol.for('#onceHandlerEnd'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $extendDescriptors$ = Symbol.for('#extendDescriptors'), $context$ = Symbol.for('#context'), $self$ = Symbol.for('#self'), $target$ = Symbol.for('#target'), $stopPropagation$ = Symbol.for('#stopPropagation'), $defaultPrevented$ = Symbol.for('#defaultPrevented'), $teleport$ = Symbol.for('#teleport');\n\n/*body*/\n// imba$imbaPath=global\nimport {Event,Element,KeyboardEvent,MouseEvent,CustomEvent} from '../dom/core';\nimport {listen,once,emit,unlisten,parseTime} from '../utils';\nimport {scheduler} from '../scheduler';\n\nimport {use_events_keyboard} from './keyboard';\nuse_events_keyboard();\n\nimport {use_events_mouse} from './mouse';\nuse_events_mouse();\n\nclass ΩCustomEvent {\n\t\n\t\n\t[$extendType$](kls){\n\t\tvar desc, $1;\n\t\t\n\t\tlet ext = kls[$extendDescriptors$] ||= true && (\n\t\t\t\n\t\t\tdesc = Object.getOwnPropertyDescriptors(kls.prototype),\n\t\t\t((($1 = desc.constructor),delete desc.constructor, $1)),\n\t\t\tdesc\n\t\t);\n\t\treturn Object.defineProperties(this,ext);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'CustomEvent');}\n};\nextend$__(CustomEvent.prototype,ΩCustomEvent.prototype);\n;\n\nclass ΩEvent {\n\t\n\t\n\tget [$modifierState$](){\n\t\t\n\t\treturn this[$context$][this[$context$].step] ||= {};\n\t\t\n\t}\n\tget [$sharedModifierState$](){\n\t\t\n\t\treturn this[$context$].handler[this[$context$].step] ||= {};\n\t\t\n\t\t\n\t}\n\t[$onceHandlerEnd$](cb){\n\t\t\n\t\treturn once(this[$context$],'end',cb);\n\t\t\n\t}\n\tαsel(selector){\n\t\t\n\t\treturn !(!(this.target.matches(String(selector))));\n\t}\n\t\n\tαclosest(selector){\n\t\t\n\t\treturn !(!(this.target.closest(String(selector))));\n\t}\n\t\n\tαlog(...params){\n\t\t\n\t\tconsole.info(...params);\n\t\treturn true;\n\t}\n\t\n\tαtrusted(){\n\t\t\n\t\treturn !(!(this.isTrusted));\n\t}\n\t\n\tαif(expr){\n\t\t\n\t\treturn !(!(expr));\n\t}\n\t\n\tαwait(time = 250){\n\t\t\n\t\treturn new Promise(function(_0) { return setTimeout(_0,parseTime(time)); });\n\t}\n\t\n\tαself(){\n\t\t\n\t\treturn this.target == this[$context$].element;\n\t}\n\t\n\tαcooldown(time = 250){\n\t\t\n\t\tlet o = this[$sharedModifierState$];\n\t\t\n\t\tif (o.active) {\n\t\t\t\n\t\t\treturn false;\n\t\t};\n\t\t\n\t\to.active = true;\n\t\to.target = this[$context$].element;\n\t\to.target.flags.incr('cooldown');\n\t\t\n\t\tthis[$onceHandlerEnd$](function() {\n\t\t\t\n\t\t\treturn setTimeout(function() {\n\t\t\t\t\n\t\t\t\to.target.flags.decr('cooldown');\n\t\t\t\treturn o.active = false;\n\t\t\t},parseTime(time));\n\t\t});\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαthrottle(time = 250){\n\t\t\n\t\tlet o = this[$sharedModifierState$];\n\t\t\n\t\tif (o.active) {\n\t\t\t\n\t\t\tif (o.next) { o.next(false) };\n\t\t\t\n\t\t\treturn new Promise(function(r) {\n\t\t\t\t\n\t\t\t\treturn o.next = function(val) {\n\t\t\t\t\t\n\t\t\t\t\to.next = null;\n\t\t\t\t\treturn r(val);\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\t\t\n\t\to.active = true;\n\t\to.el ||= this[$context$].element;\n\t\to.el.flags.incr('throttled');\n\t\t\n\t\tonce(this[$context$],'end',function() {\n\t\t\t\n\t\t\tlet delay = parseTime(time);\n\t\t\t\n\t\t\treturn o.interval = setInterval(function() {\n\t\t\t\t\n\t\t\t\tif (o.next) {\n\t\t\t\t\t\n\t\t\t\t\to.next(true);\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tclearInterval(o.interval);\n\t\t\t\t\to.el.flags.decr('throttled');\n\t\t\t\t\to.active = false;\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t},delay);\n\t\t});\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαdebounce(time = 250){\n\t\t\n\t\tlet o = this[$sharedModifierState$];\n\t\tlet e = this;\n\t\to.queue ||= [];\n\t\to.queue.push(o.last = e);\n\t\treturn new Promise(function(resolve) {\n\t\t\t\n\t\t\treturn setTimeout(function() {\n\t\t\t\t\n\t\t\t\tif (o.last == e) {\n\t\t\t\t\t\n\t\t\t\t\t// if this event is still the last\n\t\t\t\t\t// add the debounced queue to the event\n\t\t\t\t\t// and let the chain continue\n\t\t\t\t\te.debounced = o.queue;\n\t\t\t\t\to.last = null;\n\t\t\t\t\to.queue = [];\n\t\t\t\t\treturn resolve(true);\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\treturn resolve(false);\n\t\t\t\t};\n\t\t\t},parseTime(time));\n\t\t});\n\t}\n\t\n\t// will add a css className to the element (or selector)\n\t// and keep it for the duration of the event handling,\n\t// or at least 250ms\n\tαflag(name,sel){\n\t\t\n\t\tconst {element: element,step: step,state: state,id: id,current: current} = this[$context$];\n\t\t\n\t\tlet el = (sel instanceof Element) ? sel : ((sel ? element.closest(sel) : element));\n\t\t\n\t\tif (!(el)) { return true };\n\t\t\n\t\tthis[$context$].commit = true;\n\t\t\n\t\tstate[step] = id;\n\t\tel.flags.incr(name);\n\t\t\n\t\tlet ts = Date.now();\n\t\t\n\t\tonce(current,'end',function() {\n\t\t\t\n\t\t\tlet elapsed = Date.now() - ts;\n\t\t\tlet delay = Math.max(250 - elapsed,0);\n\t\t\treturn setTimeout(function() { return el.flags.decr(name); },delay);\n\t\t});\n\t\t\n\t\treturn true;\n\t}\n\t\n\tαbusy(sel){\n\t\t\n\t\t// TODO REMOVE\n\t\t// Add via \n\t\treturn this['αflag']('busy',sel);\n\t}\n\t\n\tαoutside(){\n\t\t\n\t\t// TODO Support selector here?\n\t\tconst {handler: handler} = this[$context$];\n\t\tif (handler && handler[$self$]) {\n\t\t\t\n\t\t\treturn !(handler[$self$].parentNode.contains(this.target));\n\t\t};\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Event');}\n};\nextend$__(Event.prototype,ΩEvent.prototype);\n;\n\n\nexport const events = {};\n\nexport function use_events(){\n\t\n\treturn true;\n};\n\n// could cache similar event handlers with the same parts\nexport class EventHandler {\n\t\n\tconstructor(params,closure){\n\t\t\n\t\tthis.params = params;\n\t\tthis.closure = closure;\n\t}\n\t\n\tgetHandlerForMethod(el,name){\n\t\t\n\t\tif (!(el)) { return null };\n\t\treturn el[name] ? el : this.getHandlerForMethod(el.parentNode,name);\n\t}\n\t\n\t// okay to auto-import these?\n\temit(name,...params){\n\t\treturn emit(this,name,params);\n\t}\n\ton(name,...params){\n\t\treturn listen(this,name,...params);\n\t}\n\tonce(name,...params){\n\t\treturn once(this,name,...params);\n\t}\n\tun(name,...params){\n\t\treturn unlisten(this,name,...params);\n\t}\n\t\n\tget passiveΦ(){\n\t\t\n\t\treturn this.params.passive;\n\t\t\n\t}\n\tget captureΦ(){\n\t\t\n\t\treturn this.params.capture;\n\t\t\n\t}\n\tget silentΦ(){\n\t\t\n\t\treturn this.params.silent;\n\t\t\n\t}\n\tget globalΦ(){\n\t\t\n\t\treturn this.params.global;\n\t}\n\t\n\tasync handleEvent(event){\n\t\t\n\t\tlet element = this[$target$] || event.currentTarget;\n\t\tlet mods = this.params;\n\t\t// let i = 0\n\t\t// let awaited = no\n\t\tlet error = null;\n\t\tlet silence = mods.silence || mods.silent;\n\t\t\n\t\tthis.count ||= 0;\n\t\tthis.state ||= {};\n\t\t\n\t\tlet state = {\n\t\t\telement: element,\n\t\t\tevent: event,\n\t\t\tmodifiers: mods,\n\t\t\thandler: this,\n\t\t\tid: ++this.count,\n\t\t\tstep: -1,\n\t\t\tstate: this.state,\n\t\t\tcommit: null,\n\t\t\tcurrent: null\n\t\t};\n\t\t\n\t\t// console.log 'handling event',event.target,event.currentTarget\n\t\t\n\t\tstate.current = state;\n\t\t\n\t\tif (event.handle$mod) {\n\t\t\t\n\t\t\tif (event.handle$mod.apply(state,mods.options || []) == false) {\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\tlet guard = Event[this.type + '$handle'] || Event[event.type + '$handle'] || event.handle$mod || this.guard;\n\t\t\n\t\tif (guard && guard.apply(state,mods.options || []) == false) {\n\t\t\t\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t// let object = state.proxy or event \n\t\t\n\t\tthis.currentEvents ||= new Set;\n\t\tthis.currentEvents.add(event);\n\t\t\n\t\tfor (let $2 = 0, $3 = Object.keys(mods), $8 = $3.length, handler, val; $2 < $8; $2++){\n\t\t\thandler = $3[$2];val = mods[handler];\n\t\t\tstate.step++;\n\t\t\t\n\t\t\tif (handler[0] == '_') {\n\t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t};\n\t\t\t\n\t\t\tif (handler.indexOf('~') > 0) {\n\t\t\t\t\n\t\t\t\thandler = handler.split('~')[0];\n\t\t\t};\n\t\t\t\n\t\t\tlet modargs = null;\n\t\t\tlet args = [event,state];\n\t\t\tlet res = undefined;\n\t\t\tlet context = null;\n\t\t\tlet m;\n\t\t\tlet negated = false;\n\t\t\tlet isstring = typeof handler == 'string';\n\t\t\t\n\t\t\tif (handler[0] == '$' && handler[1] == '_' && (val[0] instanceof Function)) {\n\t\t\t\t\n\t\t\t\t// handlers should commit by default\n\t\t\t\thandler = val[0];\n\t\t\t\tif (!(handler.passive)) { state.commit = true };\n\t\t\t\targs = [event,state].concat(val.slice(1));\n\t\t\t\tcontext = element;\n\t\t\t\t\n\t\t\t} else if (val instanceof Array) {\n\t\t\t\t\n\t\t\t\targs = val.slice();\n\t\t\t\tmodargs = args;\n\t\t\t\t\n\t\t\t\tfor (let i = 0, $4 = iter$__(args), $7 = $4.length; i < $7; i++) {\n\t\t\t\t\tlet par = $4[i];\n\t\t\t\t\t\n\t\t\t\t\t// what about fully nested arrays and objects?\n\t\t\t\t\t// ought to redirect this\n\t\t\t\t\tif (typeof par == 'string' && par[0] == '~' && par[1] == '$') {\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet name = par.slice(2);\n\t\t\t\t\t\tlet chain = name.split('.');\n\t\t\t\t\t\tlet value = state[chain.shift()] || event;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (let i = 0, $5 = iter$__(chain), $6 = $5.length; i < $6; i++) {\n\t\t\t\t\t\t\tlet part = $5[i];\n\t\t\t\t\t\t\tvalue = value ? value[part] : undefined;\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\targs[i] = value;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\tif (typeof handler == 'string' && (m = handler.match(/^(emit|flag|mod|moved|pin|fit|refit|map|remap|css)-(.+)$/))) {\n\t\t\t\t\n\t\t\t\tif (!(modargs)) { modargs = args = [] };\n\t\t\t\targs.unshift(m[2]);\n\t\t\t\thandler = m[1];\n\t\t\t};\n\t\t\t\n\t\t\tif (handler == 'trap') {\n\t\t\t\t\n\t\t\t\tevent[$stopPropagation$] = true;\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\tevent[$defaultPrevented$] = true;\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (handler == 'stop') {\n\t\t\t\t\n\t\t\t\tevent[$stopPropagation$] = true;\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} else if (handler == 'prevent') {\n\t\t\t\t\n\t\t\t\tevent[$defaultPrevented$] = true;\n\t\t\t\tevent.preventDefault();\n\t\t\t} else if (handler == 'commit') {\n\t\t\t\t\n\t\t\t\tstate.commit = true;\n\t\t\t} else if (handler == 'once') {\n\t\t\t\t\n\t\t\t\t// clean up bound data as well\n\t\t\t\telement.removeEventListener(event.type,this);\n\t\t\t} else if (handler == 'options' || handler == 'silence' || handler == 'silent') {\n\t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t} else if (handler == 'emit') {\n\t\t\t\t\n\t\t\t\tlet name = args[0];\n\t\t\t\tlet detail = args[1];// is custom event if not?\n\t\t\t\tlet e = new CustomEvent(name,{bubbles: true,detail: detail});// : new Event(name)\n\t\t\t\te.originalEvent = event;\n\t\t\t\tlet source = this[$teleport$] || element;\n\t\t\t\tlet customRes = source.dispatchEvent(e);\n\t\t\t\t// TODO Add reference to this event to the current handler context?\n\t\t\t} else if (typeof handler == 'string') {\n\t\t\t\t\n\t\t\t\tif (handler[0] == '!') {\n\t\t\t\t\t\n\t\t\t\t\tnegated = true;\n\t\t\t\t\thandler = handler.slice(1);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tlet path = (\"α\" + handler);\n\t\t\t\t\n\t\t\t\tlet fn = event[path];\n\t\t\t\tfn ||= (this.type && Event[this.type + '$' + handler + '$mod']);\n\t\t\t\tfn ||= event[handler + '$mod'] || Event[event.type + '$' + handler] || Event[handler + '$mod'];\n\t\t\t\t\n\t\t\t\tif (fn instanceof Function) {\n\t\t\t\t\t\n\t\t\t\t\thandler = fn;\n\t\t\t\t\tcontext = state;\n\t\t\t\t\targs = modargs || [];\n\t\t\t\t\t\n\t\t\t\t\tif (event[path]) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tcontext = event;\n\t\t\t\t\t\tevent[$context$] = state;\n\t\t\t\t\t};\n\t\t\t\t} else if (handler[0] == '_') {\n\t\t\t\t\t\n\t\t\t\t\thandler = handler.slice(1);\n\t\t\t\t\tcontext = this.closure;\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t// TODO deprecate this functionality and warn about it?\n\t\t\t\t\tcontext = this.getHandlerForMethod(element,handler);\n\t\t\t\t};\n\t\t\t};\n\t\t\t\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tif (handler instanceof Function) {\n\t\t\t\t\t\n\t\t\t\t\tres = handler.apply(context || element,args);\n\t\t\t\t} else if (context) {\n\t\t\t\t\t\n\t\t\t\t\tres = context[handler].apply(context,args);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tif (res && (res.then instanceof Function) && res != scheduler.$promise) {\n\t\t\t\t\t\n\t\t\t\t\tif (state.commit && !(silence)) { scheduler.commit() };\n\t\t\t\t\tres = await res;\n\t\t\t\t};\n\t\t\t} catch (e) {\n\t\t\t\t\n\t\t\t\terror = e;\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\t\n\t\t\tif (negated && res === true) {\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tif (!(negated) && res === false) {\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\t\n\t\t\tstate.value = res;\n\t\t};\n\t\t\n\t\temit(state,'end',state);\n\t\t\n\t\tif (state.commit && !(silence)) { scheduler.commit() };\n\t\t\n\t\tthis.currentEvents.delete(event);\n\t\tif (this.currentEvents.size == 0) {\n\t\t\t\n\t\t\tthis.emit('idle');\n\t\t};\n\t\t// what if the result is a promise\n\t\t\n\t\tif (error != undefined) {\n\t\t\t\n\t\t\tif (this.type != 'error') {\n\t\t\t\t\n\t\t\t\tlet detail = (error instanceof Error) ? error.message : error;\n\t\t\t\tlet custom = new CustomEvent('error',{detail: detail,bubbles: true,cancelable: true});\n\t\t\t\t// @ts-ignore\n\t\t\t\tcustom.error = error;\n\t\t\t\t// @ts-ignore\n\t\t\t\tcustom.originalEvent = event;\n\t\t\t\tlet res = element.dispatchEvent(custom);\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (custom.defaultPrevented) { return };\n\t\t\t};\n\t\t\t\n\t\t\tthrow error;\n\t\t};\n\t\t\n\t\treturn;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'EventHandler');}\n};\n\n\n// Add methods to Element\nclass ΩElement {\n\t\n\t\n\ton$(type,mods,scope){\n\t\t\n\t\tlet check = 'on$' + type;\n\t\tlet handler;\n\t\t\n\t\thandler = new EventHandler(mods,scope);\n\t\t\n\t\tlet capture = mods.capture || false;\n\t\tlet passive = mods.passive;\n\t\t\n\t\tlet o = capture;\n\t\t\n\t\tif (passive) {\n\t\t\t\n\t\t\to = {passive: passive,capture: capture};\n\t\t};\n\t\t\n\t\t// check if a custom handler exists for this type?\n\t\tif (this[check] instanceof Function) {\n\t\t\t\n\t\t\thandler = this[check](mods,scope,handler,o);\n\t\t} else {\n\t\t\t\n\t\t\tthis.addEventListener(type,handler,o);\n\t\t};\n\t\treturn handler;\n\t}\n\t\n\ton$error(mods,context,handler,o){\n\t\t\n\t\tif (mods.options?.length) {\n\t\t\t\n\t\t\thandler.guard = function(...types) {\n\t\t\t\t\n\t\t\t\tlet err = this.event.error;\n\t\t\t\tlet match = types.find(function(_0) { return err instanceof _0; });\n\t\t\t\treturn !(!(match));\n\t\t\t};\n\t\t};\n\t\t\n\t\tthis.addEventListener('error',handler,o);\n\t\treturn handler;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Element');}\n};\nextend$__(Element.prototype,ΩElement.prototype);\n;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5pbWJhIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29yZS5pbWJhIl0sInNvdXJjZXNDb250ZW50IjpbIiMgaW1iYSRpbWJhUGF0aD1nbG9iYWxcbmltcG9ydCB7RXZlbnQsRWxlbWVudCxLZXlib2FyZEV2ZW50LE1vdXNlRXZlbnQsQ3VzdG9tRXZlbnR9IGZyb20gJy4uL2RvbS9jb3JlJ1xuaW1wb3J0IHtsaXN0ZW4sb25jZSxlbWl0LHVubGlzdGVuLHBhcnNlVGltZX0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQge3NjaGVkdWxlcn0gZnJvbSAnLi4vc2NoZWR1bGVyJ1xuXG5pbXBvcnQge3VzZV9ldmVudHNfa2V5Ym9hcmR9IGZyb20gJy4va2V5Ym9hcmQnXG51c2VfZXZlbnRzX2tleWJvYXJkIVxuXG5pbXBvcnQge3VzZV9ldmVudHNfbW91c2V9IGZyb20gJy4vbW91c2UnXG51c2VfZXZlbnRzX21vdXNlIVxuXG5leHRlbmQgY2xhc3MgQ3VzdG9tRXZlbnRcblxuXHRkZWYgI2V4dGVuZFR5cGUga2xzXG5cdFx0bGV0IGV4dCA9IGtscy4jZXh0ZW5kRGVzY3JpcHRvcnMgfHw9IGlmIHRydWVcblx0XHRcdGxldCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoa2xzLnByb3RvdHlwZSlcblx0XHRcdGRlbGV0ZSBkZXNjLmNvbnN0cnVjdG9yXG5cdFx0XHRkZXNjXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2VsZixleHQpXG5cbmV4dGVuZCBjbGFzcyBFdmVudFxuXG5cdGdldCAjbW9kaWZpZXJTdGF0ZVxuXHRcdCNjb250ZXh0WyNjb250ZXh0LnN0ZXBdIHx8PSB7fVxuXHRcdFxuXHRnZXQgI3NoYXJlZE1vZGlmaWVyU3RhdGVcblx0XHQjY29udGV4dC5oYW5kbGVyWyNjb250ZXh0LnN0ZXBdIHx8PSB7fVxuXHRcdFxuXHRcdFxuXHRkZWYgI29uY2VIYW5kbGVyRW5kIGNiXG5cdFx0b25jZSgjY29udGV4dCwnZW5kJyxjYilcblx0XHRcblx0ZGVmIEBzZWwgc2VsZWN0b3Jcblx0XHRyZXR1cm4gISF0YXJnZXQubWF0Y2hlcyhTdHJpbmcoc2VsZWN0b3IpKVxuXG5cdGRlZiBAY2xvc2VzdCBzZWxlY3RvclxuXHRcdHJldHVybiAhIXRhcmdldC5jbG9zZXN0KFN0cmluZyhzZWxlY3RvcikpXG5cblx0ZGVmIEBsb2cgLi4ucGFyYW1zXG5cdFx0Y29uc29sZS5pbmZvKC4uLnBhcmFtcylcblx0XHRyZXR1cm4gdHJ1ZVxuXG5cdGRlZiBAdHJ1c3RlZFxuXHRcdHJldHVybiAhIWlzVHJ1c3RlZFxuXG5cdGRlZiBAaWYgZXhwclxuXHRcdHJldHVybiAhIWV4cHJcblxuXHRkZWYgQHdhaXQgdGltZSA9IDI1MFxuXHRcdG5ldyBQcm9taXNlKGRvIHNldFRpbWVvdXQoJDEscGFyc2VUaW1lKHRpbWUpKSlcblxuXHRkZWYgQHNlbGZcblx0XHRyZXR1cm4gdGFyZ2V0ID09ICNjb250ZXh0LmVsZW1lbnRcblx0XG5cdGRlZiBAY29vbGRvd24gdGltZSA9IDI1MFxuXHRcdGxldCBvID0gI3NoYXJlZE1vZGlmaWVyU3RhdGVcblxuXHRcdGlmIG8uYWN0aXZlXG5cdFx0XHRyZXR1cm4gbm9cblxuXHRcdG8uYWN0aXZlID0geWVzXG5cdFx0by50YXJnZXQgPSAjY29udGV4dC5lbGVtZW50XG5cdFx0by50YXJnZXQuZmxhZ3MuaW5jcignY29vbGRvd24nKVxuXG5cdFx0I29uY2VIYW5kbGVyRW5kIGRvXG5cdFx0XHRzZXRUaW1lb3V0KCYscGFyc2VUaW1lKHRpbWUpKSBkb1xuXHRcdFx0XHRvLnRhcmdldC5mbGFncy5kZWNyKCdjb29sZG93bicpXHRcblx0XHRcdFx0by5hY3RpdmUgPSBub1xuXG5cdFx0cmV0dXJuIHllc1xuXG5cdGRlZiBAdGhyb3R0bGUgdGltZSA9IDI1MFxuXHRcdGxldCBvID0gI3NoYXJlZE1vZGlmaWVyU3RhdGVcblxuXHRcdGlmIG8uYWN0aXZlXG5cdFx0XHRvLm5leHQobm8pIGlmIG8ubmV4dFxuXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UgZG8ocilcblx0XHRcdFx0by5uZXh0ID0gZG8odmFsKVxuXHRcdFx0XHRcdG8ubmV4dCA9IG51bGxcblx0XHRcdFx0XHRyKHZhbClcblxuXHRcdG8uYWN0aXZlID0geWVzXG5cdFx0by5lbCB8fD0gI2NvbnRleHQuZWxlbWVudFxuXHRcdG8uZWwuZmxhZ3MuaW5jcigndGhyb3R0bGVkJylcblxuXHRcdG9uY2UoI2NvbnRleHQsJ2VuZCcpIGRvXG5cdFx0XHRsZXQgZGVsYXkgPSBwYXJzZVRpbWUodGltZSlcblxuXHRcdFx0by5pbnRlcnZhbCA9IHNldEludGVydmFsKCYsZGVsYXkpIGRvXG5cdFx0XHRcdGlmIG8ubmV4dFxuXHRcdFx0XHRcdG8ubmV4dCh5ZXMpXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRjbGVhckludGVydmFsKG8uaW50ZXJ2YWwpXG5cdFx0XHRcdFx0by5lbC5mbGFncy5kZWNyKCd0aHJvdHRsZWQnKVxuXHRcdFx0XHRcdG8uYWN0aXZlID0gbm9cblx0XHRcdFx0cmV0dXJuXG5cblx0XHRyZXR1cm4geWVzXG5cblx0ZGVmIEBkZWJvdW5jZSB0aW1lID0gMjUwXG5cdFx0bGV0IG8gPSAjc2hhcmVkTW9kaWZpZXJTdGF0ZVxuXHRcdGxldCBlID0gc2VsZlxuXHRcdG8ucXVldWUgfHw9IFtdXG5cdFx0by5xdWV1ZS5wdXNoKG8ubGFzdCA9IGUpXG5cdFx0bmV3IFByb21pc2UgZG8ocmVzb2x2ZSlcblx0XHRcdHNldFRpbWVvdXQoJixwYXJzZVRpbWUodGltZSkpIGRvXG5cdFx0XHRcdGlmIG8ubGFzdCA9PSBlXG5cdFx0XHRcdFx0IyBpZiB0aGlzIGV2ZW50IGlzIHN0aWxsIHRoZSBsYXN0XG5cdFx0XHRcdFx0IyBhZGQgdGhlIGRlYm91bmNlZCBxdWV1ZSB0byB0aGUgZXZlbnRcblx0XHRcdFx0XHQjIGFuZCBsZXQgdGhlIGNoYWluIGNvbnRpbnVlXG5cdFx0XHRcdFx0ZS5kZWJvdW5jZWQgPSBvLnF1ZXVlXG5cdFx0XHRcdFx0by5sYXN0ID0gbnVsbFxuXHRcdFx0XHRcdG8ucXVldWUgPSBbXVxuXHRcdFx0XHRcdHJlc29sdmUodHJ1ZSlcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHJlc29sdmUoZmFsc2UpXG5cblx0IyB3aWxsIGFkZCBhIGNzcyBjbGFzc05hbWUgdG8gdGhlIGVsZW1lbnQgKG9yIHNlbGVjdG9yKVxuXHQjIGFuZCBrZWVwIGl0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGV2ZW50IGhhbmRsaW5nLFxuXHQjIG9yIGF0IGxlYXN0IDI1MG1zXG5cdGRlZiBAZmxhZyBuYW1lLCBzZWxcblx0XHRjb25zdCB7ZWxlbWVudCxzdGVwLHN0YXRlLGlkLGN1cnJlbnR9ID0gI2NvbnRleHRcblx0XG5cdFx0bGV0IGVsID0gc2VsIGlzYSBFbGVtZW50ID8gc2VsIDogKHNlbCA/IGVsZW1lbnQuY2xvc2VzdChzZWwpIDogZWxlbWVudClcblxuXHRcdHJldHVybiB0cnVlIHVubGVzcyBlbFxuXG5cdFx0I2NvbnRleHQuY29tbWl0ID0geWVzXG5cdFxuXHRcdHN0YXRlW3N0ZXBdID0gaWRcblx0XHRlbC5mbGFncy5pbmNyKG5hbWUpXG5cblx0XHRsZXQgdHMgPSBEYXRlLm5vdyFcblx0XHRcblx0XHRvbmNlKGN1cnJlbnQsJ2VuZCcpIGRvXG5cdFx0XHRsZXQgZWxhcHNlZCA9IERhdGUubm93ISAtIHRzXG5cdFx0XHRsZXQgZGVsYXkgPSBNYXRoLm1heCgyNTAgLSBlbGFwc2VkLDApXG5cdFx0XHRzZXRUaW1lb3V0KCYsZGVsYXkpIGRvIGVsLmZsYWdzLmRlY3IobmFtZSlcblxuXHRcdHJldHVybiB0cnVlXG5cblx0ZGVmIEBidXN5IHNlbFxuXHRcdCMgVE9ETyBSRU1PVkVcblx0XHQjIEFkZCB2aWEgXG5cdFx0c2VsZlsnzrFmbGFnJ10oJ2J1c3knLHNlbClcblxuXHRkZWYgQG91dHNpZGVcblx0XHQjIFRPRE8gU3VwcG9ydCBzZWxlY3RvciBoZXJlP1xuXHRcdGNvbnN0IHtoYW5kbGVyfSA9ICNjb250ZXh0XG5cdFx0aWYgaGFuZGxlciBhbmQgaGFuZGxlci4jc2VsZlxuXHRcdFx0cmV0dXJuICFoYW5kbGVyLiNzZWxmLnBhcmVudE5vZGUuY29udGFpbnModGFyZ2V0KVxuXG5cbmV4cG9ydCBjb25zdCBldmVudHMgPSB7fVxuXG5leHBvcnQgZGVmIHVzZV9ldmVudHNcblx0eWVzXG5cbiMgY291bGQgY2FjaGUgc2ltaWxhciBldmVudCBoYW5kbGVycyB3aXRoIHRoZSBzYW1lIHBhcnRzXG5leHBvcnQgY2xhc3MgRXZlbnRIYW5kbGVyXG5cdGRlZiBjb25zdHJ1Y3RvciBwYXJhbXMsY2xvc3VyZVxuXHRcdHNlbGYucGFyYW1zID0gcGFyYW1zXG5cdFx0c2VsZi5jbG9zdXJlID0gY2xvc3VyZVxuXG5cdGRlZiBnZXRIYW5kbGVyRm9yTWV0aG9kIGVsLCBuYW1lXG5cdFx0cmV0dXJuIG51bGwgdW5sZXNzIGVsXG5cdFx0ZWxbbmFtZV0gPyBlbCA6IHNlbGYuZ2V0SGFuZGxlckZvck1ldGhvZChlbC5wYXJlbnROb2RlLG5hbWUpXG5cblx0IyBva2F5IHRvIGF1dG8taW1wb3J0IHRoZXNlP1xuXHRkZWYgZW1pdCBuYW1lLCAuLi5wYXJhbXMgZG8gZW1pdChzZWxmLG5hbWUscGFyYW1zKVxuXHRkZWYgb24gbmFtZSwgLi4ucGFyYW1zIGRvIGxpc3RlbihzZWxmLG5hbWUsLi4ucGFyYW1zKVxuXHRkZWYgb25jZSBuYW1lLCAuLi5wYXJhbXMgZG8gb25jZShzZWxmLG5hbWUsLi4ucGFyYW1zKVxuXHRkZWYgdW4gbmFtZSwgLi4ucGFyYW1zIGRvIHVubGlzdGVuKHNlbGYsbmFtZSwuLi5wYXJhbXMpXG5cdFx0XG5cdGdldCBwYXNzaXZlP1xuXHRcdHBhcmFtcy5wYXNzaXZlXG5cdFx0XG5cdGdldCBjYXB0dXJlP1xuXHRcdHBhcmFtcy5jYXB0dXJlXG5cdFx0XG5cdGdldCBzaWxlbnQ/XG5cdFx0cGFyYW1zLnNpbGVudFxuXHRcdFxuXHRnZXQgZ2xvYmFsP1xuXHRcdHBhcmFtcy5nbG9iYWxcblxuXHRkZWYgaGFuZGxlRXZlbnQgZXZlbnRcblx0XHRsZXQgZWxlbWVudCA9ICN0YXJnZXQgb3IgZXZlbnQuY3VycmVudFRhcmdldFxuXHRcdGxldCBtb2RzID0gc2VsZi5wYXJhbXNcblx0XHQjIGxldCBpID0gMFxuXHRcdCMgbGV0IGF3YWl0ZWQgPSBub1xuXHRcdGxldCBlcnJvciA9IG51bGxcblx0XHRsZXQgc2lsZW5jZSA9IG1vZHMuc2lsZW5jZSBvciBtb2RzLnNpbGVudFxuXHRcdFxuXHRcdHNlbGYuY291bnQgfHw9IDBcblx0XHRzZWxmLnN0YXRlIHx8PSB7fVxuXG5cdFx0bGV0IHN0YXRlID0ge1xuXHRcdFx0ZWxlbWVudDogZWxlbWVudFxuXHRcdFx0ZXZlbnQ6IGV2ZW50XG5cdFx0XHRtb2RpZmllcnM6IG1vZHNcblx0XHRcdGhhbmRsZXI6IHRoaXNcblx0XHRcdGlkOiArK3NlbGYuY291bnRcblx0XHRcdHN0ZXA6IC0xXG5cdFx0XHRzdGF0ZTogc2VsZi5zdGF0ZVxuXHRcdFx0Y29tbWl0OiBudWxsXG5cdFx0XHRjdXJyZW50OiBudWxsXG5cdFx0fVxuXHRcdFxuXHRcdCMgY29uc29sZS5sb2cgJ2hhbmRsaW5nIGV2ZW50JyxldmVudC50YXJnZXQsZXZlbnQuY3VycmVudFRhcmdldFxuXG5cdFx0c3RhdGUuY3VycmVudCA9IHN0YXRlXG5cblx0XHRpZiBldmVudC5oYW5kbGUkbW9kXG5cdFx0XHRpZiBldmVudC5oYW5kbGUkbW9kLmFwcGx5KHN0YXRlLG1vZHMub3B0aW9ucyBvciBbXSkgPT0gZmFsc2Vcblx0XHRcdFx0cmV0dXJuXG5cblx0XHRsZXQgZ3VhcmQgPSBFdmVudFtzZWxmLnR5cGUgKyAnJGhhbmRsZSddIG9yIEV2ZW50W2V2ZW50LnR5cGUgKyAnJGhhbmRsZSddIG9yIGV2ZW50LmhhbmRsZSRtb2Qgb3Igc2VsZi5ndWFyZFxuXHRcdFx0XG5cdFx0aWYgZ3VhcmQgYW5kIGd1YXJkLmFwcGx5KHN0YXRlLG1vZHMub3B0aW9ucyBvciBbXSkgPT0gZmFsc2Vcblx0XHRcdHJldHVyblxuXHRcdFxuXHRcdCMgbGV0IG9iamVjdCA9IHN0YXRlLnByb3h5IG9yIGV2ZW50IFxuXHRcdFxuXHRcdHNlbGYuY3VycmVudEV2ZW50cyB8fD0gbmV3IFNldFxuXHRcdHNlbGYuY3VycmVudEV2ZW50cy5hZGQoZXZlbnQpXHRcblxuXHRcdGZvciBvd24gaGFuZGxlcix2YWwgb2YgbW9kc1xuXHRcdFx0c3RhdGUuc3RlcCsrXG5cblx0XHRcdGlmIGhhbmRsZXJbMF0gPT0gJ18nXG5cdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdGlmIGhhbmRsZXIuaW5kZXhPZignficpID4gMFxuXHRcdFx0XHRoYW5kbGVyID0gaGFuZGxlci5zcGxpdCgnficpWzBdXG5cdFx0XHRcblx0XHRcdGxldCBtb2RhcmdzID0gbnVsbFxuXHRcdFx0bGV0IGFyZ3MgPSBbZXZlbnQsc3RhdGVdXG5cdFx0XHRsZXQgcmVzID0gdW5kZWZpbmVkXG5cdFx0XHRsZXQgY29udGV4dCA9IG51bGxcblx0XHRcdGxldCBtXG5cdFx0XHRsZXQgbmVnYXRlZCA9IG5vXG5cdFx0XHRsZXQgaXNzdHJpbmcgPSB0eXBlb2YgaGFuZGxlciA9PSAnc3RyaW5nJ1xuXHRcdFx0XG5cdFx0XHRpZiBoYW5kbGVyWzBdID09ICckJyBhbmQgaGFuZGxlclsxXSA9PSAnXycgYW5kIHZhbFswXSBpc2EgRnVuY3Rpb25cblx0XHRcdFx0IyBoYW5kbGVycyBzaG91bGQgY29tbWl0IGJ5IGRlZmF1bHRcblx0XHRcdFx0aGFuZGxlciA9IHZhbFswXVxuXHRcdFx0XHRzdGF0ZS5jb21taXQgPSB5ZXMgdW5sZXNzIGhhbmRsZXIucGFzc2l2ZVxuXHRcdFx0XHRhcmdzID0gW2V2ZW50LHN0YXRlXS5jb25jYXQodmFsLnNsaWNlKDEpKVxuXHRcdFx0XHRjb250ZXh0ID0gZWxlbWVudFxuXHRcdFx0XHRcblxuXHRcdFx0IyBwYXJzZSB0aGUgYXJndW1lbnRzXG5cdFx0XHRlbGlmIHZhbCBpc2EgQXJyYXlcblx0XHRcdFx0YXJncyA9IHZhbC5zbGljZSgpXG5cdFx0XHRcdG1vZGFyZ3MgPSBhcmdzXG5cblx0XHRcdFx0Zm9yIHBhcixpIGluIGFyZ3Ncblx0XHRcdFx0XHQjIHdoYXQgYWJvdXQgZnVsbHkgbmVzdGVkIGFycmF5cyBhbmQgb2JqZWN0cz9cblx0XHRcdFx0XHQjIG91Z2h0IHRvIHJlZGlyZWN0IHRoaXNcblx0XHRcdFx0XHRpZiB0eXBlb2YgcGFyID09ICdzdHJpbmcnICYmIHBhclswXSA9PSAnficgYW5kIHBhclsxXSA9PSAnJCdcblx0XHRcdFx0XHRcdGxldCBuYW1lID0gcGFyLnNsaWNlKDIpXG5cdFx0XHRcdFx0XHRsZXQgY2hhaW4gPSBuYW1lLnNwbGl0KCcuJylcblx0XHRcdFx0XHRcdGxldCB2YWx1ZSA9IHN0YXRlW2NoYWluLnNoaWZ0KCldIG9yIGV2ZW50XG5cblx0XHRcdFx0XHRcdGZvciBwYXJ0LGkgaW4gY2hhaW5cblx0XHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZSA/IHZhbHVlW3BhcnRdIDogdW5kZWZpbmVkXG5cblx0XHRcdFx0XHRcdGFyZ3NbaV0gPSB2YWx1ZVxuXG5cdFx0XHRpZiB0eXBlb2YgaGFuZGxlciA9PSAnc3RyaW5nJyBhbmQgbSA9IGhhbmRsZXIubWF0Y2goL14oZW1pdHxmbGFnfG1vZHxtb3ZlZHxwaW58Zml0fHJlZml0fG1hcHxyZW1hcHxjc3MpLSguKykkLylcblx0XHRcdFx0bW9kYXJncyA9IGFyZ3MgPSBbXSB1bmxlc3MgbW9kYXJnc1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQobVsyXSlcblx0XHRcdFx0aGFuZGxlciA9IG1bMV1cblxuXHRcdFx0aWYgaGFuZGxlciA9PSAndHJhcCdcblx0XHRcdFx0ZXZlbnQuI3N0b3BQcm9wYWdhdGlvbiA9IHllc1xuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRldmVudC4jZGVmYXVsdFByZXZlbnRlZCA9IHllc1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cblx0XHRcdGVsaWYgaGFuZGxlciA9PSAnc3RvcCdcblx0XHRcdFx0ZXZlbnQuI3N0b3BQcm9wYWdhdGlvbiA9IHllc1xuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0ZWxpZiBoYW5kbGVyID09ICdwcmV2ZW50J1xuXHRcdFx0XHRldmVudC4jZGVmYXVsdFByZXZlbnRlZCA9IHllc1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cdFx0XHRlbGlmIGhhbmRsZXIgPT0gJ2NvbW1pdCdcblx0XHRcdFx0c3RhdGUuY29tbWl0ID0geWVzXG5cblx0XHRcdGVsaWYgaGFuZGxlciA9PSAnb25jZSdcblx0XHRcdFx0IyBjbGVhbiB1cCBib3VuZCBkYXRhIGFzIHdlbGxcblx0XHRcdFx0ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LnR5cGUsc2VsZilcblx0XHRcdGVsaWYgaGFuZGxlciA9PSAnb3B0aW9ucycgb3IgaGFuZGxlciA9PSAnc2lsZW5jZScgb3IgaGFuZGxlciA9PSAnc2lsZW50J1xuXHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRlbGlmIGhhbmRsZXIgPT0gJ2VtaXQnXG5cdFx0XHRcdGxldCBuYW1lID0gYXJnc1swXVxuXHRcdFx0XHRsZXQgZGV0YWlsID0gYXJnc1sxXSAjIGlzIGN1c3RvbSBldmVudCBpZiBub3Q/XG5cdFx0XHRcdGxldCBlID0gbmV3IEN1c3RvbUV2ZW50KG5hbWUsIGJ1YmJsZXM6IHRydWUsIGRldGFpbDogZGV0YWlsKSAjIDogbmV3IEV2ZW50KG5hbWUpXG5cdFx0XHRcdGUub3JpZ2luYWxFdmVudCA9IGV2ZW50XG5cdFx0XHRcdGxldCBzb3VyY2UgPSAjdGVsZXBvcnQgb3IgZWxlbWVudFxuXHRcdFx0XHRsZXQgY3VzdG9tUmVzID0gc291cmNlLmRpc3BhdGNoRXZlbnQoZSlcblx0XHRcdFx0IyBUT0RPIEFkZCByZWZlcmVuY2UgdG8gdGhpcyBldmVudCB0byB0aGUgY3VycmVudCBoYW5kbGVyIGNvbnRleHQ/XG5cblx0XHRcdGVsaWYgdHlwZW9mIGhhbmRsZXIgPT0gJ3N0cmluZydcblx0XHRcdFx0aWYgaGFuZGxlclswXSA9PSAnISdcblx0XHRcdFx0XHRuZWdhdGVkID0geWVzXG5cdFx0XHRcdFx0aGFuZGxlciA9IGhhbmRsZXIuc2xpY2UoMSlcblxuXHRcdFx0XHRsZXQgcGF0aCA9IFwizrF7aGFuZGxlcn1cIlxuXG5cdFx0XHRcdGxldCBmbiA9IGV2ZW50W3BhdGhdXG5cdFx0XHRcdGZuIHx8PSAoc2VsZi50eXBlIGFuZCBFdmVudFtzZWxmLnR5cGUgKyAnJCcgKyBoYW5kbGVyICsgJyRtb2QnXSlcblx0XHRcdFx0Zm4gfHw9IGV2ZW50W2hhbmRsZXIgKyAnJG1vZCddIG9yIEV2ZW50W2V2ZW50LnR5cGUgKyAnJCcgKyBoYW5kbGVyXSBvciBFdmVudFtoYW5kbGVyICsgJyRtb2QnXVxuXHRcdFx0XHRcblx0XHRcdFx0aWYgZm4gaXNhIEZ1bmN0aW9uXG5cdFx0XHRcdFx0aGFuZGxlciA9IGZuXG5cdFx0XHRcdFx0Y29udGV4dCA9IHN0YXRlXG5cdFx0XHRcdFx0YXJncyA9IG1vZGFyZ3Mgb3IgW11cblxuXHRcdFx0XHRcdGlmIGV2ZW50W3BhdGhdXG5cdFx0XHRcdFx0XHRjb250ZXh0ID0gZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LiNjb250ZXh0ID0gc3RhdGVcblxuXHRcdFx0XHQjIHNob3VsZCBkZWZhdWx0IHRvIGZpcnN0IGxvb2sgYXQgY2xvc3VyZSAtIG5vP1xuXHRcdFx0XHRlbGlmIGhhbmRsZXJbMF0gPT0gJ18nXG5cdFx0XHRcdFx0aGFuZGxlciA9IGhhbmRsZXIuc2xpY2UoMSlcblx0XHRcdFx0XHRjb250ZXh0ID0gc2VsZi5jbG9zdXJlXG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHQjIFRPRE8gZGVwcmVjYXRlIHRoaXMgZnVuY3Rpb25hbGl0eSBhbmQgd2FybiBhYm91dCBpdD9cblx0XHRcdFx0XHRjb250ZXh0ID0gc2VsZi5nZXRIYW5kbGVyRm9yTWV0aG9kKGVsZW1lbnQsaGFuZGxlcilcblx0XHRcdFxuXHRcdFx0dHJ5XG5cdFx0XHRcdGlmIGhhbmRsZXIgaXNhIEZ1bmN0aW9uXG5cdFx0XHRcdFx0cmVzID0gaGFuZGxlci5hcHBseShjb250ZXh0IG9yIGVsZW1lbnQsYXJncylcblx0XHRcdFx0ZWxpZiBjb250ZXh0XG5cdFx0XHRcdFx0cmVzID0gY29udGV4dFtoYW5kbGVyXS5hcHBseShjb250ZXh0LGFyZ3MpXG5cblx0XHRcdFx0aWYgcmVzIGFuZCByZXMudGhlbiBpc2EgRnVuY3Rpb24gYW5kIHJlcyAhPSBzY2hlZHVsZXIuJHByb21pc2Vcblx0XHRcdFx0XHRzY2hlZHVsZXIuY29tbWl0ISBpZiBzdGF0ZS5jb21taXQgYW5kICFzaWxlbmNlXG5cdFx0XHRcdFx0cmVzID0gYXdhaXQgcmVzXG5cdFx0XHRjYXRjaCBlXG5cdFx0XHRcdGVycm9yID0gZVxuXHRcdFx0XHRicmVha1xuXG5cdFx0XHRpZiBuZWdhdGVkIGFuZCByZXMgPT09IHRydWVcblx0XHRcdFx0YnJlYWtcblx0XHRcdGlmICFuZWdhdGVkIGFuZCByZXMgPT09IGZhbHNlXG5cdFx0XHRcdGJyZWFrXG5cblx0XHRcdHN0YXRlLnZhbHVlID0gcmVzXG5cdFx0XG5cdFx0ZW1pdChzdGF0ZSwnZW5kJyxzdGF0ZSlcblxuXHRcdHNjaGVkdWxlci5jb21taXQhIGlmIHN0YXRlLmNvbW1pdCBhbmQgIXNpbGVuY2VcblxuXHRcdHNlbGYuY3VycmVudEV2ZW50cy5kZWxldGUoZXZlbnQpXG5cdFx0aWYgc2VsZi5jdXJyZW50RXZlbnRzLnNpemUgPT0gMFxuXHRcdFx0c2VsZi5lbWl0KCdpZGxlJylcblx0XHQjIHdoYXQgaWYgdGhlIHJlc3VsdCBpcyBhIHByb21pc2Vcblx0XHRcblx0XHRpZiBlcnJvciAhPSB1bmRlZmluZWRcblx0XHRcdGlmIHNlbGYudHlwZSAhPSAnZXJyb3InXG5cdFx0XHRcdGxldCBkZXRhaWwgPSBlcnJvciBpc2EgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3Jcblx0XHRcdFx0bGV0IGN1c3RvbSA9IG5ldyBDdXN0b21FdmVudCgnZXJyb3InLHtkZXRhaWw6IGRldGFpbCwgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZX0pXG5cdFx0XHRcdCMgQHRzLWlnbm9yZVxuXHRcdFx0XHRjdXN0b20uZXJyb3IgPSBlcnJvclxuXHRcdFx0XHQjIEB0cy1pZ25vcmVcblx0XHRcdFx0Y3VzdG9tLm9yaWdpbmFsRXZlbnQgPSBldmVudFxuXHRcdFx0XHRsZXQgcmVzID0gZWxlbWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbSlcblx0XHRcdFx0IyBAdHMtaWdub3JlXG5cdFx0XHRcdHJldHVybiBpZiBjdXN0b20uZGVmYXVsdFByZXZlbnRlZFxuXG5cdFx0XHR0aHJvdyBlcnJvclxuXG5cdFx0cmV0dXJuXG5cblxuIyBBZGQgbWV0aG9kcyB0byBFbGVtZW50XG5leHRlbmQgY2xhc3MgRWxlbWVudFxuXG5cdGRlZiBvbiQgdHlwZSwgbW9kcywgc2NvcGVcblx0XHRsZXQgY2hlY2sgPSAnb24kJyArIHR5cGVcblx0XHRsZXQgaGFuZGxlclxuXG5cdFx0aGFuZGxlciA9IG5ldyBFdmVudEhhbmRsZXIobW9kcyxzY29wZSlcblxuXHRcdGxldCBjYXB0dXJlID0gbW9kcy5jYXB0dXJlIG9yIG5vXG5cdFx0bGV0IHBhc3NpdmUgPSBtb2RzLnBhc3NpdmVcblxuXHRcdGxldCBvID0gY2FwdHVyZVxuXG5cdFx0aWYgcGFzc2l2ZVxuXHRcdFx0byA9IHtwYXNzaXZlOiBwYXNzaXZlLCBjYXB0dXJlOiBjYXB0dXJlfVxuXG5cdFx0IyBjaGVjayBpZiBhIGN1c3RvbSBoYW5kbGVyIGV4aXN0cyBmb3IgdGhpcyB0eXBlP1xuXHRcdGlmIHNlbGZbY2hlY2tdIGlzYSBGdW5jdGlvblxuXHRcdFx0aGFuZGxlciA9IHNlbGZbY2hlY2tdKG1vZHMsc2NvcGUsaGFuZGxlcixvKVxuXHRcdGVsc2Vcblx0XHRcdHNlbGYuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLGhhbmRsZXIsbylcblx0XHRyZXR1cm4gaGFuZGxlclxuXG5cdGRlZiBvbiRlcnJvciBtb2RzLGNvbnRleHQsaGFuZGxlcixvXG5cdFx0aWYgbW9kcy5vcHRpb25zLi5sZW5ndGhcblx0XHRcdGhhbmRsZXIuZ3VhcmQgPSBkbyguLi50eXBlcylcblx0XHRcdFx0bGV0IGVyciA9IHRoaXMuZXZlbnQuZXJyb3Jcblx0XHRcdFx0bGV0IG1hdGNoID0gdHlwZXMuZmluZCBkbyBlcnIgaXNhICQxXG5cdFx0XHRcdHJldHVybiAhIW1hdGNoXG5cblx0XHRzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJyxoYW5kbGVyLG8pXG5cdFx0cmV0dXJuIGhhbmRsZXIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsV0FBVyxPQUFPLGFBQWE7QUFDOUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLE9BQU8sVUFBVTtBQUM1RCxNQUFNLEVBQUUsU0FBUyxPQUFPLGNBQWM7O0FBRXRDLE1BQU0sRUFBRSxtQkFBbUIsT0FBTyxZQUFZO0FBQzlDLG1CQUFtQixFQUFDOztBQUVwQixNQUFNLEVBQUUsZ0JBQWdCLE9BQU8sU0FBUztBQUN4QyxnQkFBZ0IsRUFBQzs7QUFFVixLQUFLLENBQUMsWUFBVyxFQUFBOzs7Z0JBRVAsR0FBRyxDQUFBOzs7RUFDZCxJQUFBLEdBQUcsR0FBRyxHQUFHLHFCQUFtQixLQUFRLElBQUksS0FBQTs7R0FDdkMsSUFBSSxHQUFHLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO0dBQ25ELFFBQUEsSUFBSSxDQUFDLFdBQVcsU0FBaEIsSUFBSSxDQUFDLFdBQVc7R0FDdkIsSUFBSTtFQUFBLENBSEU7RUFJUCxPQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0VBQUE7OztBQUFBO1VBUHRCLFdBQVc7QUFPVzs7QUFFNUIsS0FBSyxDQUFDLE1BQUssRUFBQTs7O0NBRWpCLEdBQUcsb0JBQWU7O3dCQUNULGdCQUFTLENBQUMsSUFBSSxDQUFB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","css":""}