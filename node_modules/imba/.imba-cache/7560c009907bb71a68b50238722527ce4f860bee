{"id":"fr","warnings":[],"errors":[],"js":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};;\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\t// @ts-ignore\n\tObject.defineProperties(target,descriptors);\n\treturn target;\n};\nconst $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $updateHotKeys$ = Symbol.for('#updateHotKeys'), $inInput$ = Symbol.for('#inInput'), $inEditable$ = Symbol.for('#inEditable'), $hotkeyTarget$ = Symbol.for('#hotkeyTarget'), $hotkeyCombos$ = Symbol.for('#hotkeyCombos'), $extendType$ = Symbol.for('#extendType'), $combos$ = Symbol.for('#combos'), $target$ = Symbol.for('#target'), $hotkeyHandlers$ = Symbol.for('#hotkeyHandlers'), $defaultPrevented$ = Symbol.for('#defaultPrevented'), $visit$ = Symbol.for('#visit'), $key$ = Symbol.for('#key');\nlet isApple;\n\n/*body*/\nimport {Event,CustomEvent,Element} from '../dom/core';\n\ntry {\n\tisApple = (globalThis.navigator.platform || '').match(/iPhone|iPod|iPad|Mac/);\n} catch (e) { };\n\nexport function use_events_hotkey(){\n\t\n\treturn true;\n};\n\nimport {humanize,htmlify} from './hotkey.shared';\n\nconst Globals = {esc: true};\n\nclass HotkeyEvent extends CustomEvent {\n\t\n\t\n\tαfocus(expr){\n\t\t\n\t\tlet el = this.target;\n\t\tlet doc = el.ownerDocument;\n\t\t\n\t\tif (expr) {\n\t\t\t\n\t\t\tel = el.querySelector(expr) || el.closest(expr) || doc.querySelector(expr);\n\t\t};\n\t\t\n\t\tif (el == doc.body) {\n\t\t\t\n\t\t\tif (doc.activeElement != doc.body) { doc.activeElement.blur() };\n\t\t} else {\n\t\t\t\n\t\t\tel.focus();\n\t\t\t\n\t\t};\n\t\treturn true;\n\t}\n\t\n\tαlocal(){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\tαrepeat(){\n\t\t\n\t\treturn true;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'HotkeyEvent');inheritClass$__(this);}\n};\n\nimport Mousetrap from './mousetrap';\n\nconst stopCallback = function(e,el,combo) {\n\t\n\tif (el.tagName == 'INPUT' && (combo == 'down' || combo == 'up')) {\n\t\t\n\t\treturn false;\n\t};\n\t\n\tif (el.tagName == 'INPUT' || el.tagName == 'SELECT' || el.tagName == 'TEXTAREA') {\n\t\t\n\t\tif (Globals[combo]) {\n\t\t\t\n\t\t\te[$inInput$] = true;\n\t\t\te[$inEditable$] = true;\n\t\t\treturn false;\n\t\t};\n\t\treturn true;\n\t\t\n\t};\n\tif (el.contentEditable && (el.contentEditable == 'true' || el.contentEditable == 'plaintext-only')) {\n\t\t\n\t\tif (Globals[combo]) {\n\t\t\t\n\t\t\te[$inEditable$] = true;\n\t\t\treturn false;\n\t\t};\n\t\treturn true;\n\t\t\n\t};\n\treturn false;\n};\n\nexport const hotkeys = new class HotKeyManager {\n\t\n\tconstructor(){\n\t\t\n\t\tthis.combos = {'*': {}};\n\t\tthis.identifiers = {};\n\t\tthis.labels = {};\n\t\tthis.handler = this.handle.bind(this);\n\t\tthis.mousetrap = null;\n\t\tthis.hothandler = this.handle.bind(this);\n\t}\n\t\n\taddKeycodes(obj){\n\t\t\n\t\treturn Mousetrap.addKeycodes(obj);\n\t}\n\t\n\ttrigger(combo){\n\t\t\n\t\treturn this.mousetrap?.trigger?.(combo);\n\t}\n\t\n\tregister(key,mods = {}){\n\t\t\n\t\tif (!(this.mousetrap)) {\n\t\t\t\n\t\t\tthis.mousetrap = Mousetrap(globalThis.document);\n\t\t\tthis.mousetrap.stopCallback = stopCallback;\n\t\t};\n\t\t\n\t\tif (!(this.combos[key])) {\n\t\t\t\n\t\t\tthis.combos[key] = true;\n\t\t\tthis.mousetrap.bind(key,this.handler);\n\t\t};\n\t\t\n\t\tif (mods.capture || mods.force) {\n\t\t\t\n\t\t\tGlobals[key] = true;\n\t\t};\n\t\treturn this;\n\t\t\n\t}\n\tcomboIdentifier(combo){\n\t\t\n\t\treturn this.identifiers[combo] ||= combo.replace(/\\+/g,'_').replace(/\\ /g,'-').replace(/\\*/g,'all').replace(/\\|/g,' ');\n\t}\n\t\n\thumanize(combo,platform = 'auto'){\n\t\t\n\t\treturn humanize(combo,platform);\n\t}\n\t\n\thtmlify(combo,platform = 'auto'){\n\t\t\n\t\treturn htmlify(combo,platform);\n\t}\n\t\n\tmatchCombo(str){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t@param {Event} e\n\t*/\n\thandle(e,combo){\n\t\t\n\t\tlet source = e.target && e.target[$hotkeyTarget$] || e.target || globalThis.document.body;\n\t\tlet targets = Array.from(globalThis.document.querySelectorAll('[data-hotkey]'));\n\t\tlet root = source.ownerDocument;\n\t\tlet group = source;\n\t\t\n\t\t// find the closest hotkey \n\t\twhile (group && group != root){\n\t\t\t\n\t\t\tif (group.hotkeys === true) {\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tgroup = group.parentNode;\n\t\t};\n\t\t\n\t\ttargets = targets.reverse().filter(function(el) {\n\t\t\t\n\t\t\tlet combos = el[$hotkeyCombos$];\n\t\t\tif (!(combos && (combos[combo] || combos['*']))) { return false };\n\t\t\t\n\t\t\tlet par = el;\n\t\t\twhile (par && par != root){\n\t\t\t\t\n\t\t\t\tif (par.hotkeys === false) {\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\t\t\t\tpar = par.parentNode;\n\t\t\t};\n\t\t\treturn true;\n\t\t\t\n\t\t});\n\t\tif (!(targets.length)) { return };\n\t\t\n\t\tlet detail = {combo: combo,originalEvent: e,targets: targets};\n\t\tlet event = new CustomEvent('hotkey',{bubbles: true,detail: detail});\n\t\tevent[$extendType$](HotkeyEvent);\n\t\t\n\t\tevent.originalEvent = e;\n\t\tevent.hotkey = combo;\n\t\t\n\t\tsource.dispatchEvent(event);\n\t\tlet handlers = [];\n\t\t\n\t\tfor (let $1 = 0, $2 = iter$__(targets), $6 = $2.length; $1 < $6; $1++) {\n\t\t\tlet receiver = $2[$1];\n\t\t\tfor (let $3 = 0, $4 = iter$__(receiver[$hotkeyHandlers$]), $5 = $4.length; $3 < $5; $3++) {\n\t\t\t\tlet handler = $4[$3];\n\t\t\t\tif (handler[$combos$][combo] || handler[$combos$]['*']) {\n\t\t\t\t\t\n\t\t\t\t\tif (handler.params.local && !(handler[$target$].contains(source))) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif (!(e[$inEditable$]) || (handler.captureΦ || handler.params.force)) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet el = handler[$target$];\n\t\t\t\t\t\tif (group.contains(el) || el.contains(group) || (handler.globalΦ)) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\thandlers.push(handler);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\tfor (let i = 0, $7 = iter$__(handlers), $8 = $7.length; i < $8; i++) {\n\t\t\tlet handler = $7[i];\n\t\t\tif (!(e.repeat) || handler.params.repeat) {\n\t\t\t\t\n\t\t\t\thandler.handleEvent(event);\n\t\t\t};\n\t\t\t\n\t\t\tif (!(handler.passiveΦ) || event[$defaultPrevented$]) { e?.preventDefault?.() };\n\t\t\tif (!(handler.passiveΦ)) { break; };\n\t\t};\n\t\treturn this;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'HotKeyManager');}\n};\n\nconst DefaultHandler = function(e,state) {\n\t\n\tlet el = state.element;\n\t\n\tif (el instanceof Element) {\n\t\t\n\t\tif (el.matches('input,textarea,select,option')) {\n\t\t\t\n\t\t\tel.focus();\n\t\t} else {\n\t\t\t\n\t\t\tel.click();\n\t\t};\n\t};\n\treturn;\n\t\n};\nDefaultHandler.passive = true;\n\nclass ΩElement {\n\t\n\t\n\ton$hotkey(mods,scope,handler,o){\n\t\tvar self = this;\n\t\t\n\t\tthis[$hotkeyHandlers$] ||= [];\n\t\tthis[$hotkeyHandlers$].push(handler);\n\t\t// addEventListener('hotkey',handler,o)\n\t\t\n\t\thandler[$target$] = this;\n\t\t// add a default handler\n\t\tmods.$_ ||= [DefaultHandler];\n\t\t\n\t\tmods[$visit$] = function() { return self[$updateHotKeys$](); };\n\t\tthis[$updateHotKeys$]();\n\t\treturn handler;\n\t\t\n\t}\n\t[$updateHotKeys$](){\n\t\t\n\t\tlet all = {};\n\t\tfor (let $9 = 0, $10 = iter$__(this[$hotkeyHandlers$]), $14 = $10.length; $9 < $14; $9++) {\n\t\t\tlet handler = $10[$9];\n\t\t\tlet mods = handler.params;\n\t\t\tlet key = mods.options[0];\n\t\t\tif ((handler[$key$] != key) ? ((handler[$key$] = key,true)) : false) {\n\t\t\t\t\n\t\t\t\thandler[$combos$] = {};\n\t\t\t\tfor (let $11 = 0, $12 = iter$__(key.split('|')), $13 = $12.length; $11 < $13; $11++) {\n\t\t\t\t\tlet combo = $12[$11];\n\t\t\t\t\thotkeys.register(combo,mods);\n\t\t\t\t\thandler[$combos$][combo] = true;\n\t\t\t\t};\n\t\t\t};\n\t\t\tObject.assign(all,handler[$combos$]);\n\t\t};\n\t\t\n\t\tthis[$hotkeyCombos$] = all;\n\t\tthis.dataset.hotkey = Object.keys(all).join(' ');\n\t\treturn this;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Element');}\n};\nextend$__(Element.prototype,ΩElement.prototype);\n;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}