{"id":"cm","warnings":[],"errors":[],"js":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};\nconst $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $$inited$ = Symbol.for('##inited'), $afterVisit$ = Symbol.for('#afterVisit'), $beforeReconcile$ = Symbol.for('#beforeReconcile'), $afterReconcile$ = Symbol.for('#afterReconcile'), $__hooks__$ = Symbol.for('#__hooks__'), $autorender$ = Symbol.for('#autorender'), $$visitContext$ = Symbol.for('##visitContext');\n\n/*body*/\n// imba$stdlib=1\n\nimport {Node,HTMLElement,CUSTOM_TYPES} from './core';\nimport {createLiveFragment,createSlot} from './fragment';\nimport {scheduler} from '../scheduler';\n\nimport {renderer} from './context';\nimport {emit} from '../utils';\n\nconst hydrator = new class {\n\t[$__patch__$]($$ = {}){\n\t\tvar $1;\n\t\t($1 = $$.items) !== undefined && (this.items = $1);\n\t\t($1 = $$.current) !== undefined && (this.current = $1);\n\t\t($1 = $$.lastQueued) !== undefined && (this.lastQueued = $1);\n\t\t($1 = $$.tests) !== undefined && (this.tests = $1);\n\t\t\n\t}\n\tconstructor($$ = null){\n\t\tthis[$__init__$]($$);\n\t}\n\t[$__init__$]($$ = null,deep = true){\n\t\tvar $2;\n\t\tthis.items = ($$ && ($2 = $$.items) !== undefined) ? ($2) : [];\n\t\tthis.current = ($$ && ($2 = $$.current) !== undefined) ? ($2) : null;\n\t\tthis.lastQueued = ($$ && ($2 = $$.lastQueued) !== undefined) ? ($2) : null;\n\t\tthis.tests = ($$ && ($2 = $$.tests) !== undefined) ? ($2) : 0;\n\t\t\n\t}\n\tflush(){\n\t\t\n\t\tlet item = null;\n\t\t\n\t\twhile (item = this.items.shift()){\n\t\t\t\n\t\t\tif (!(item.parentNode) || item.hydratedΦ) { continue; };\n\t\t\t// Mark as inited to stop connectedCallback from early exit\n\t\t\tlet prev = this.current;\n\t\t\tthis.current = item;\n\t\t\titem.__F |= 1024;\n\t\t\titem.connectedCallback();\n\t\t\tthis.current = prev;\n\t\t};\n\t\treturn;\n\t}\n\t\n\tqueue(item){\n\t\tvar self = this;\n\t\t\n\t\t// let len = items.push(item)\n\t\tlet len = this.items.length;\n\t\tlet idx = 0;\n\t\tlet prev = this.lastQueued;\n\t\tthis.lastQueued = item;\n\t\t\n\t\tlet BEFORE = Node.DOCUMENT_POSITION_PRECEDING;\n\t\tlet AFTER = Node.DOCUMENT_POSITION_FOLLOWING;\n\t\t\n\t\tif (len) {\n\t\t\t\n\t\t\tlet prevIndex = this.items.indexOf(prev);\n\t\t\tlet index = prevIndex;\n\t\t\t\n\t\t\tlet compare = function(a,b) {\n\t\t\t\t\n\t\t\t\tself.tests++;\n\t\t\t\treturn a.compareDocumentPosition(b);\n\t\t\t};\n\t\t\t\n\t\t\tif (prevIndex == -1 || prev.nodeName != item.nodeName) {\n\t\t\t\t\n\t\t\t\tindex = prevIndex = 0;\n\t\t\t};\n\t\t\t\n\t\t\tlet curr = this.items[index];\n\t\t\t\n\t\t\twhile (curr && compare(curr,item) & AFTER){\n\t\t\t\t\n\t\t\t\tcurr = this.items[++index];\n\t\t\t};\n\t\t\t\n\t\t\tif (index != prevIndex) {\n\t\t\t\t\n\t\t\t\tcurr ? this.items.splice(index,0,item) : this.items.push(item);\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\twhile (curr && compare(curr,item) & BEFORE){\n\t\t\t\t\t\n\t\t\t\t\tcurr = this.items[--index];\n\t\t\t\t};\n\t\t\t\tif (index != prevIndex) {\n\t\t\t\t\t\n\t\t\t\t\tcurr ? this.items.splice(index + 1,0,item) : this.items.unshift(item);\n\t\t\t\t};\n\t\t\t};\n\t\t} else {\n\t\t\t\n\t\t\tthis.items.push(item);\n\t\t\tif (!(this.current)) { globalThis.queueMicrotask(this.flush.bind(this)) };\n\t\t};\n\t\t\n\t\treturn;\n\t}\n};\n\nexport function hydrate(){\n\t\n\treturn hydrator.flush();\n};\n\nexport class Component extends HTMLElement {\n\t\n\tconstructor(){\n\t\t\n\t\tsuper();\n\t\tif (this.flags$ns) {\n\t\t\t\n\t\t\t// explain?\n\t\t\tthis.flag$ = this.flagExt$;\n\t\t};\n\t\t\n\t\tthis.setup$();\n\t\tthis.build();\n\t}\n\t\n\tsetup$(){\n\t\t\n\t\tthis.__slots = {};\n\t\treturn this.__F = 0;\n\t}\n\t\n\t[$__init__$](){\n\t\t\n\t\tthis.__F |= (1 | 2);\n\t\treturn this;\n\t}\n\t\n\t[$$inited$](){\n\t\t\n\t\tif (this[$__hooks__$]) { return this[$__hooks__$].inited(this) };\n\t\t\n\t}\n\tflag$(str){\n\t\t\n\t\t\n\t\tthis.className = this.flags$ext = str;\n\t\treturn;\n\t}\n\t\n\t// called immediately after construction \n\tbuild(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\t// called before the first mount\n\tawaken(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\t// called when element is attached to document\n\tmount(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\t// called when element is detached from document\n\tunmount(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\t// called after render\n\trendered(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\t// called before element is stringified on server (SSR)\n\tdehydrate(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\t// called before awaken if element was not initially created via imba - on the client\n\thydrate(){\n\t\t\n\t\t// should only autoschedule if we are not awakening inside a parent context that\n\t\tthis.autoschedule = true;\n\t\treturn this;\n\t}\n\t\n\ttick(){\n\t\t\n\t\treturn this.commit();\n\t}\n\t\n\t// called when component is (re-)rendered from its parent\n\tvisit(){\n\t\t\n\t\treturn this.commit();\n\t}\n\t\n\t// Wrapper for rendering. Default implementation\n\tcommit(){\n\t\t\n\t\tif (!(this.renderΦ)) {\n\t\t\t\n\t\t\tthis.__F |= 8192;\n\t\t\treturn this;\n\t\t};\n\t\tthis.__F |= 256;\n\t\tthis.render && this.render();\n\t\tthis.rendered();\n\t\treturn this.__F = (this.__F | 512) & ~256 & ~8192;\n\t}\n\t\n\tget autoschedule(){\n\t\t\n\t\treturn (this.__F & 64) != 0;\n\t}\n\t\n\tset autoschedule(value){\n\t\t\n\t\tvalue ? ((this.__F |= 64)) : ((this.__F &= ~64));\n\t}\n\t\n\t/*\n\t\tNaming and accepted values will likely change - experimental\n\t\n\t\tyes = render on events / imba.commit\n\t\tno = force manual render\n\t\tnull / undefined = render via parent\n\t\t(n)s = render every n s\n\t\t(n)ms = render every n ms\n\t\t(n)fps = render n times per second\n\t\t*/\n\t\n\t/**\n\t\n\t\tNaming and accepted values will likely change - experimental\n\t\n\t\tyes = render on events / imba.commit\n\t\tno = force manual render\n\t\tnull / undefined = render via parent\n\t\t(n)s = render every n s\n\t\t(n)ms = render every n ms\n\t\t(n)fps = render n times per second\n\t\t\n\t*/\n\tset autorender(value){\n\t\t\n\t\tlet o = this[$autorender$] ||= {};\n\t\to.value = value;\n\t\tif (this.mountedΦ) { scheduler.schedule(this,o) };\n\t\treturn;\n\t}\n\t\n\tget renderΦ(){\n\t\t\n\t\treturn !(this.suspendedΦ);\n\t}\n\t\n\tget mountingΦ(){\n\t\t\n\t\treturn (this.__F & 16) != 0;\n\t}\n\t\n\tget mountedΦ(){\n\t\t\n\t\treturn (this.__F & 32) != 0;\n\t}\n\t\n\tget awakenedΦ(){\n\t\t\n\t\treturn (this.__F & 8) != 0;\n\t}\n\t\n\tget renderedΦ(){\n\t\t\n\t\treturn (this.__F & 512) != 0;\n\t}\n\t\n\tget suspendedΦ(){\n\t\t\n\t\treturn (this.__F & 4096) != 0;\n\t}\n\t\n\tget renderingΦ(){\n\t\t\n\t\treturn (this.__F & 256) != 0;\n\t}\n\t\n\tget scheduledΦ(){\n\t\t\n\t\treturn (this.__F & 128) != 0;\n\t}\n\t\n\tget hydratedΦ(){\n\t\t\n\t\treturn (this.__F & 2) != 0;\n\t}\n\t\n\tget ssrΦ(){\n\t\t\n\t\treturn (this.__F & 1024) != 0;\n\t}\n\t\n\tschedule(){\n\t\t\n\t\tscheduler.on('commit',this);\n\t\tthis.__F |= 128;\n\t\treturn this;\n\t}\n\t\n\tunschedule(){\n\t\t\n\t\tscheduler.un('commit',this);\n\t\tthis.__F &= ~128;\n\t\treturn this;\n\t}\n\t\n\tasync suspend(cb = null){\n\t\t\n\t\tlet val = this.flags.incr('@suspended');\n\t\tthis.__F |= 4096;\n\t\tif (cb instanceof Function) {\n\t\t\t\n\t\t\tawait cb();\n\t\t\tthis.unsuspend();\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tunsuspend(){\n\t\t\n\t\tlet val = this.flags.decr('@suspended');\n\t\tif (val == 0) {\n\t\t\t\n\t\t\tthis.__F &= ~4096;\n\t\t\tthis.commit();;\n\t\t};\n\t\t\n\t\treturn this;\n\t\t\n\t}\n\t[$afterVisit$](){\n\t\t\n\t\tthis.visit();\n\t\tif (this[$$visitContext$]) { return this[$$visitContext$] = null };\n\t}\n\t\n\t[$beforeReconcile$](){\n\t\t\n\t\tif (this.__F & 1024) {\n\t\t\t\n\t\t\tthis.__F = this.__F & ~1024;\n\t\t\t// remove flag\n\t\t\t// not if ssr?!\n\t\t\tthis.classList.remove('_ssr_');\n\t\t\tif (this.flags$ext && this.flags$ext.indexOf('_ssr_') == 0) {\n\t\t\t\t\n\t\t\t\tthis.flags$ext = this.flags$ext.slice(5);\n\t\t\t};\n\t\t\t// TODO document this behaviour\n\t\t\tif (!(this.__F & 512)) { this.innerHTML = '' };\n\t\t};\n\t\t\n\t\tif (globalThis.DEBUG_IMBA) {\n\t\t\t\n\t\t\trenderer.push(this);\n\t\t};\n\t\tif (this[$$visitContext$]) { this[$$visitContext$] = null };\n\t\treturn this;\n\t}\n\t\n\t[$afterReconcile$](){\n\t\t\n\t\tif (globalThis.DEBUG_IMBA) {\n\t\t\t\n\t\t\trenderer.pop(this);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t\n\tconnectedCallback(){\n\t\t\n\t\tlet flags = this.__F;\n\t\tlet inited = flags & 1;\n\t\tlet awakened = flags & 8;\n\t\t\n\t\tif (!(inited) && !((flags & 1024))) {\n\t\t\t\n\t\t\thydrator.queue(this);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\t// return if we are already in the process of mounting - or have mounted\n\t\tif (flags & (16 | 32)) {\n\t\t\t\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tthis.__F |= 16;\n\t\t\n\t\tif (!(inited)) {\n\t\t\t\n\t\t\tthis[$__init__$]();\n\t\t};\n\t\t\n\t\tif (!(flags & 2)) {\n\t\t\t\n\t\t\t// clearly seems wrong?\n\t\t\tthis.flags$ext = this.className;\n\t\t\tthis.__F |= 2;\n\t\t\tthis.hydrate();\n\t\t\tthis.commit();\n\t\t};\n\t\t\n\t\tif (!(awakened)) {\n\t\t\t\n\t\t\tthis.awaken();\n\t\t\tthis.__F |= 8;\n\t\t};\n\t\t\n\t\temit(this,'mount');\n\t\tlet res = this.mount();\n\t\tif (res && (res.then instanceof Function)) {\n\t\t\t\n\t\t\tres.then(scheduler.commit);\n\t\t};\n\t\t\n\t\tflags = this.__F = (this.__F | 32) & ~16;\n\t\t\n\t\tif (flags & 64) {\n\t\t\t\n\t\t\tthis.schedule();\n\t\t};\n\t\t\n\t\t\n\t\tif (this[$autorender$]) { scheduler.schedule(this,this[$autorender$]) };\n\t\treturn this;\n\t}\n\t\n\tdisconnectedCallback(){\n\t\t\n\t\tthis.__F = this.__F & (~32 & ~16);\n\t\tif (this.__F & 128) {\n\t\t\t\n\t\t\t// trigger potential unschedule listeners\n\t\t\tthis.unschedule();\n\t\t};\n\t\temit(this,'unmount');\n\t\tthis.unmount();\n\t\tif (this[$autorender$]) { return scheduler.unschedule(this,this[$autorender$]) };\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Component');inheritClass$__(this);}\n};\n\n// Backwards compatibility\nexport const ImbaElement = Component;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}