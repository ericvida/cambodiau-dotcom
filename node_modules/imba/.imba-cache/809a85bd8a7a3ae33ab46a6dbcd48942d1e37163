{"id":"hu","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\t// @ts-ignore\n\tObject.defineProperties(target,descriptors);\n\treturn target;\n};\nconst $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $insertInto$ = Symbol.for('#insertInto'), $removeFrom$ = Symbol.for('#removeFrom'), $all$ = Symbol.for('#all'), $phase$ = Symbol.for('#phase'), $nodes$ = Symbol.for('#nodes'), $sizes$ = Symbol.for('#sizes'), $mode$ = Symbol.for('#mode'), $enabled$ = Symbol.for('#enabled'), $easer$ = Symbol.for('#easer'), $anims$ = Symbol.for('#anims'), $_easer_$ = Symbol.for('#_easer_');\nvar $1 = Symbol(), $2 = Symbol();\n\n/*body*/\nimport {Element,get_document} from './core';\nimport {Emitter} from '../utils';\n\nclass Transitions extends Emitter {\n\t[$__patch__$]($$ = {}){\n\t\tvar $3;\n\t\tsuper[$__patch__$] && super[$__patch__$]($$);\n\t\t($3 = $$.selectors) !== undefined && (this.selectors = $3);\n\t\t\n\t}\n\tconstructor(){\n\t\tsuper(...arguments);\n\t\tsuper[$__init__$] || this[$__init__$]();this[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t[$__init__$]($$ = null,deep = true){\n\t\tvar $4;\n\t\tdeep && super[$__init__$] && super[$__init__$](...arguments);\n\t\tthis.selectors = ($$ && ($4 = $$.selectors) !== undefined) ? ($4) : {};\n\t\t\n\t}\n\taddSelectors(add,group){\n\t\t\n\t\tlet arr = this.selectors[group] ||= [];\n\t\tarr.push(...add);\n\t\treturn true;\n\t}\n\t\n\tgetSelectors(...groups){\n\t\t\n\t\tlet sels = [];\n\t\tfor (let $5 = 0, $6 = iter$__(groups), $7 = $6.length; $5 < $7; $5++) {\n\t\t\tlet group = $6[$5];\n\t\t\tif (this.selectors[group]) {\n\t\t\t\t\n\t\t\t\tsels.push(...this.selectors[group]);\n\t\t\t};\n\t\t};\n\t\treturn (sels && sels.length) ? sels.join(',') : null;\n\t\t\n\t}\n\tnodesForBase(base,kind = 'transition'){\n\t\t\n\t\tlet hits = [base];\n\t\tlet query = (this.selectors[kind] || []).join(',');\n\t\tif (query == '') { return hits };\n\t\t\n\t\tlet elements = base.querySelectorAll(query);\n\t\t\n\t\tfor (let $8 = 0, $9 = iter$__(elements), $10 = $9.length; $8 < $10; $8++) {\n\t\t\tlet el = $9[$8];\n\t\t\tif (el.closest('._ease_') == base) {\n\t\t\t\t\n\t\t\t\thits.push(el);\n\t\t\t};\n\t\t};\n\t\thits[$all$] = elements;\n\t\treturn hits;\n\t}\n\t\n\tnodesWithSize(nodes,dir = 'in'){\n\t\t\n\t\tlet sel = this.getSelectors('_off_sized',(\"_\" + dir + \"_sized\"));\n\t\tif (!(sel)) { return [] };\n\t\treturn nodes.filter(function(_0) { return _0.matches(sel); });\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'Transitions');inheritClass$__(this);}\n};\n\n\nexport const transitions = new Transitions;\n\nlet instance = globalThis.imba ||= {};\ninstance.transitions = transitions;\n\nexport class Easer extends Emitter {\n\t\n\tconstructor(target){\n\t\t\n\t\tsuper();\n\t\tthis.dom = target;\n\t\tthis[$phase$] = null;\n\t\tthis[$nodes$] = [];\n\t\tthis[$sizes$] = new Map;\n\t\t\n\t\tthis[$__initor__$]===$2 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\tlog(...params){\n\t\t\n\t\treturn;\n\t\t\n\t}\n\tget flags(){\n\t\t\n\t\treturn this.dom.flags;\n\t\t\n\t}\n\tflag(flags){\n\t\t\n\t\tfor (let $11 = 0, $12 = iter$__(this[$nodes$]), $13 = $12.length; $11 < $13; $11++) {\n\t\t\tlet node = $12[$11];\n\t\t\tnode.flags.add(flags);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\tunflag(flags){\n\t\t\n\t\tfor (let $14 = 0, $15 = iter$__(this[$nodes$]), $16 = $15.length; $14 < $16; $14++) {\n\t\t\tlet node = $15[$14];\n\t\t\tnode.flags.remove(flags);\n\t\t};\n\t\treturn this;\n\t\t\n\t}\n\tcommit(){\n\t\t\n\t\treturn this.dom.offsetWidth;\n\t\t\n\t}\n\tenable(mode){\n\t\t\n\t\tif (mode) {\n\t\t\t\n\t\t\tthis[$mode$] = mode;\n\t\t};\n\t\tif (!((this[$enabled$] != true) ? ((this[$enabled$] = true,true)) : false)) { return this };\n\t\t// TODO support attach/detach deopt api\n\t\tthis.dom[$insertInto$] = this[$insertInto$].bind(this);\n\t\tthis.dom[$removeFrom$] = this[$removeFrom$].bind(this);\n\t\treturn this.flags.add('_ease_');\n\t\t\n\t}\n\tdisable(){\n\t\t\n\t\tthis.flags.remove('_ease_');\n\t\treturn true;\n\t}\n\t\n\tset phase(val){\n\t\t\n\t\tlet prev = this[$phase$];\n\t\t\n\t\tif ((this[$phase$] != val) ? ((this[$phase$] = val,true)) : false) {\n\t\t\t\n\t\t\tif (prev) { this.unflag((\"@\" + prev)) };\n\t\t\tif (val) { this.flag((\"@\" + val)) };\n\t\t\t\n\t\t\t// clearing all the node animations\n\t\t\tif (!(val)) {\n\t\t\t\t\n\t\t\t\tthis.unflag('@out');\n\t\t\t\tthis.unflag('@in');\n\t\t\t\tthis.unflag('@off');\n\t\t\t\tthis[$nodes$] = null;\n\t\t\t\t\n\t\t\t};\n\t\t\tif (val == 'enter' && prev == 'leave') {\n\t\t\t\t\n\t\t\t\tthis.dom?.transitionΞoutΞcancel?.(this);\n\t\t\t};\n\t\t\tif (val == 'leave' && prev == 'enter') {\n\t\t\t\t\n\t\t\t\tthis.dom?.transitionΞinΞcancel?.(this);\n\t\t\t};\n\t\t\tif (val == 'enter') {\n\t\t\t\t\n\t\t\t\tthis.dom?.transitionΞin?.(this);\n\t\t\t};\n\t\t\tif (val == 'leave') {\n\t\t\t\t\n\t\t\t\tthis.dom?.transitionΞout?.(this);\n\t\t\t};\n\t\t\tif (prev == 'leave' && !(val)) {\n\t\t\t\t\n\t\t\t\tthis.dom?.transitionΞoutΞend?.(this);\n\t\t\t};\n\t\t\tif (prev == 'enter' && !(val)) {\n\t\t\t\t\n\t\t\t\tthis.dom?.transitionΞinΞend?.(this);\n\t\t\t};\n\t\t};\n\t}\n\t\n\tget phase(){\n\t\t\n\t\treturn this[$phase$];\n\t\t\n\t}\n\tget leavingΦ(){\n\t\t\n\t\treturn this.phase == 'leave';\n\t}\n\t\n\tget enteringΦ(){\n\t\t\n\t\treturn this.phase == 'enter';\n\t}\n\t\n\tget idleΦ(){\n\t\t\n\t\treturn this.phase == null;\n\t\t\n\t}\n\ttrack(cb){\n\t\tvar self = this;\n\t\t\n\t\tlet anims = {before: get_document().getAnimations()};\n\t\tthis.commit();\n\t\tcb();\n\t\tthis.commit();\n\t\tanims.after = get_document().getAnimations();\n\t\tanims.fresh = anims.after.filter(function(_0) {\n\t\t\t\n\t\t\treturn anims.before.indexOf(_0) == -1;\n\t\t});\n\t\tanims.deep = anims.fresh.filter(function(_0) {\n\t\t\tlet el;\n\t\t\t\n\t\t\tif (el = _0.effect.target) {\n\t\t\t\t\n\t\t\t\tif (el.closest('._ease_') != self.dom) { return true };\n\t\t\t};\n\t\t\treturn false;\n\t\t});\n\t\tanims.own = anims.fresh.filter(function(_0) { return anims.deep.indexOf(_0) == -1; });\n\t\t\n\t\tif (anims.own.length) {\n\t\t\t\n\t\t\tanims.finished = new Promise(function(resolve) {\n\t\t\t\t\n\t\t\t\tlet all = new Set(anims.own);\n\t\t\t\tlet finish = function() {\n\t\t\t\t\t\n\t\t\t\t\tall.delete(this);\n\t\t\t\t\tif (all.size == 0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tfor (let $17 = 0, $18 = iter$__(anims.own), $19 = $18.length; $17 < $19; $17++) {\n\t\t\t\t\tlet anim = $18[$17];\n\t\t\t\t\tanim[$easer$] = self;\n\t\t\t\t\tanim.addEventListener('finish',finish,{once: true});\n\t\t\t\t\tanim.addEventListener('cancel',finish,{once: true});\n\t\t\t\t};\n\t\t\t\treturn;\n\t\t\t});\n\t\t} else {\n\t\t\t\n\t\t\tanims.finished = Promise.resolve(true);\n\t\t};\n\t\treturn anims;\n\t\t\n\t}\n\tgetAnimatedNodes(){\n\t\t\n\t\treturn transitions.nodesForBase(this.dom);\n\t}\n\t\n\tgetNodeSizes(dir = 'in',nodes = this[$nodes$]){\n\t\t\n\t\tlet hits = transitions.nodesWithSize(nodes,dir);\n\t\tlet map = new Map;\n\t\t\n\t\tfor (let $20 = 0, $21 = iter$__(hits), $22 = $21.length; $20 < $22; $20++) {\n\t\t\tlet node = $21[$20];\n\t\t\tlet style = window.getComputedStyle(node);\n\t\t\tmap.set(node,{\n\t\t\t\twidth: style.width,// node.offsetWidth\n\t\t\t\theight: style.height// node.offsetHeight\n\t\t\t});\n\t\t};\n\t\treturn map;\n\t}\n\t\n\tapplyNodeSizes(map){\n\t\t\n\t\tfor (let [node,rect] of iter$__(map)){\n\t\t\t\n\t\t\tnode.style.width = rect.width;// + 'px'\n\t\t\tnode.style.height = rect.height;// + 'px'\n\t\t};\n\t\treturn map;\n\t}\n\t\n\tclearNodeSizes(map){\n\t\t\n\t\tif (!(map)) { return };\n\t\t\n\t\tfor (let [node,rect] of iter$__(map)){\n\t\t\t\n\t\t\tnode.style.removeProperty('width');\n\t\t\tnode.style.removeProperty('height');\n\t\t};\n\t\treturn map;\n\t}\n\t\n\t[$insertInto$](parent,before){\n\t\tvar self = this;\n\t\t\n\t\tlet sizes;\n\t\tif (this.enteringΦ) {\n\t\t\t\n\t\t\treturn this.dom;\n\t\t};\n\t\tlet finish = function() {\n\t\t\t\n\t\t\tif (sizes) { self.clearNodeSizes(sizes) };\n\t\t\tif (self.enteringΦ) { return self.phase = null };\n\t\t};\n\t\t\n\t\tif (this.leavingΦ) {\n\t\t\t\n\t\t\tlet anims = this.track(function() {\n\t\t\t\t\n\t\t\t\tself.phase = 'enter';\n\t\t\t\tself.unflag('@off');\n\t\t\t\treturn self.unflag('@out');\n\t\t\t\t\n\t\t\t});\n\t\t\t// what if there are no animations?\n\t\t\tanims.finished.then(finish,function(_0) { return self.log('error cancel leave',_0); });\n\t\t\treturn this.dom;\n\t\t};\n\t\t\n\t\tlet parConnected = get_document().contains(parent);\n\t\t\n\t\tbefore ? parent.insertBefore(this.dom,before) : parent.appendChild(this.dom);\n\t\t\n\t\tthis[$nodes$] = this.getAnimatedNodes();\n\t\t\n\t\t// Could it be better to set the flags before adding it to the dom?\n\t\t\n\t\tthis.flag('_instant_');\n\t\tthis.unflag('@out');\n\t\tthis.commit();\n\t\t// must be certain that they don't have a size set directly?\n\t\tsizes = this[$nodes$].sized = this.getNodeSizes('in');\n\t\t\n\t\tthis.dom?.transitionΞinΞinit?.(this);\n\t\tthis.flag('@off');\n\t\tthis.flag('@in');\n\t\tthis.flag('@enter');\n\t\t\n\t\tthis.commit();\n\t\tthis.unflag('_instant_');\n\t\t\n\t\tlet anims = this[$anims$] = this.track(function() {\n\t\t\t\n\t\t\tself.phase = 'enter';\n\t\t\tself.applyNodeSizes(sizes);\n\t\t\tself.unflag('@off');\n\t\t\treturn self.unflag('@in');\n\t\t});\n\t\t\n\t\tanims.finished.then(finish,function(_0) {\n\t\t\t\n\t\t\tself.clearNodeSizes(sizes);\n\t\t\treturn self.log('cancelled insert into',_0);\n\t\t});\n\t\treturn this.dom;\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\tvar self = this;\n\t\t\n\t\tif (this.leavingΦ) {\n\t\t\t\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet sizes;\n\t\tlet finalize = function() {\n\t\t\t\n\t\t\tif (self.phase == 'leave') {\n\t\t\t\t\n\t\t\t\tself.dom.emit('easeoutend',{});\n\t\t\t\tparent.removeChild(self.dom);\n\t\t\t\treturn self.phase = null;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.enteringΦ && this[$mode$] != 'forward') {\n\t\t\t\n\t\t\tlet anims = this.track(function() {\n\t\t\t\t\n\t\t\t\tself.flag('@off');\n\t\t\t\tself.flag('@in');\n\t\t\t\tself.unflag('@out');\n\t\t\t\tself.phase = 'leave';\n\t\t\t\treturn self.clearNodeSizes(self[$nodes$].sized);\n\t\t\t});\n\t\t\tthis.log(\"cancel enter anims own\",anims.own,anims);\n\t\t\tanims.finished.then(finalize,function(_0) { return self.log('error cancel entering',_0); });\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tthis[$nodes$] = this.getAnimatedNodes();\n\t\tsizes = this.getNodeSizes('out');\n\t\tthis.applyNodeSizes(sizes);\n\t\tthis.flag('@leave');\n\t\tlet anims = this[$anims$] = this.track(function() {\n\t\t\t\n\t\t\tself.phase = 'leave';\n\t\t\tself.flag('@off');\n\t\t\tself.flag('@out');\n\t\t\treturn self.clearNodeSizes(sizes);\n\t\t});\n\t\t\n\t\t// do it in the same tick if we find no running animations(!)\n\t\tif (!(anims.own.length)) {\n\t\t\t\n\t\t\tfinalize();\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tanims.finished.then(finalize,function() {\n\t\t\t\n\t\t\treturn true;\n\t\t});\n\t\treturn;\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $2;defineName$__(this,'Easer');inheritClass$__(this);}\n};\n\nclass ΩElement {\n\t\n\t\n\t// called when element is getting ready to enter\t\n\ttransitionΞinΞinit(transition){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t// called when element is ready to enter\t\n\ttransitionΞin(transition){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t// called when element has finished entering\n\ttransitionΞinΞend(transition){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t// called when element has been asked to leave while entering\n\ttransitionΞinΞcancel(transition){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t// called when element starts to leave\n\ttransitionΞout(transition){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t// called when element is done leaving\n\ttransitionΞoutΞend(transition){\n\t\t\n\t\treturn true;\n\t}\n\t\n\t// called when element re-enters while leaving\n\ttransitionΞoutΞcancel(transition){\n\t\t\n\t\treturn true;\n\t\t\n\t}\n\tget ease(){\n\t\t\n\t\treturn this[$_easer_$] ||= new Easer(this);\n\t\t\n\t}\n\t/**\n\t@param {any} value\n\t*/\n\tset ease(value){\n\t\t\n\t\tif (value == false) {\n\t\t\t\n\t\t\tthis[$_easer_$]?.disable?.();\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tthis.ease.enable(value);\n\t\t\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Element');}\n};\nextend$__(Element.prototype,ΩElement.prototype);\n;\nexport function use_dom_transitions(){\n\t\n\treturn true;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}