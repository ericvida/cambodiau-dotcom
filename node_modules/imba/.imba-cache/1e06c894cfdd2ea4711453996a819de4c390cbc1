{"id":"hp","warnings":[],"errors":[],"js":"function defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};;\nfunction extend$__(target,ext){\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(ext);\n\tdelete descriptors.constructor;\n\t// @ts-ignore\n\tObject.defineProperties(target,descriptors);\n\treturn target;\n};\nconst $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $$reactive$ = Symbol.for('##reactive'), $$referenced$ = Symbol.for('##referenced'), $$dereferenced$ = Symbol.for('##dereferenced'), $map$ = Symbol.for('#map'), $__init__$ = Symbol.for('#__init__'), $__patch__$ = Symbol.for('#__patch__'), $child$ = Symbol.for('#child'), $reactions$ = Symbol.for('#reactions'), $promise$ = Symbol.for('#promise');\n\n/*body*/\nimport {hooks} from './hooks';\nimport {once,emit,listen} from './utils';\nimport {scheduler,commit} from './scheduler';\nimport {Node} from './dom/core';\n\nconst F = {\n\tTOUCHING: 1 << 1,\n\tSTALE: 1 << 2,\n\tOBJECT: 1 << 3,\n\tRUNNING: 1 << 4,\n\tINVALIDATING: 1 << 5,\n\tPOSSIBLY_STALE: 1 << 6,\n\tAUTORUN: 1 << 7\n};\n\nlet TRACKING = 0;\nlet ACTIVATED = false;\nlet V = 0;\nlet RUN_ID = 0;\nlet NEXT_REF_ID = 1;\n\nconst MAPS = {\n\tMETA: new Map,\n\tVALUE: new Map,\n\tREF: new Map\n};\nconst OWNREF = Symbol.for(\"~\");\nconst METAREF = Symbol.for(\"~~\");\n\nconst SymbolForSymbol = function(sym,map) {\n\t\n\tif (!(map.has(sym))) { map.set(sym,Symbol()) };\n\treturn map.get(sym);\n\t\n};\nconst VALUESYM = function(name) {\n\t\n\treturn (typeof name == 'symbol') ? SymbolForSymbol(name,MAPS.VALUE) : Symbol.for(name);\n};\n\nconst METASYM = function(name) {\n\t\n\treturn (typeof name == 'symbol') ? SymbolForSymbol(name,MAPS.META) : Symbol.for((\"#\" + name + \"__\"));\n\t\n};\nconst REFSYM = function(name) {\n\t\n\treturn (typeof name == 'symbol') ? SymbolForSymbol(name,MAPS.REF) : Symbol.for((\"~\" + name));\n};\n\nconst OBSERVED = function(item,res) {\n\t\n\tif (TRACKING) { CTX.add(item[OWNREF]) };\n\treturn res;\n};\n\nconst CHANGED = function(item,res) {\n\t\n\titem[OWNREF].invalidated(0);\n\treturn res;\n};\n\nconst REFERENCED = function(item,ref,extensions) {\n\t\n\tlet beacon = item[OWNREF];\n\tif (!(beacon)) {\n\t\t\n\t\tbeacon = item[OWNREF] = new Ref(F.OBJECT);\n\t\tObject.defineProperties(item,extensions);\n\t};\n\tif (ref) { beacon.addSubscriber(ref) };\n\treturn item;\n};\n\nconst DEREFERENCED = function(item,ref) {\n\t\n\tlet beacon = item[OWNREF];\n\tif (beacon) {\n\t\t\n\t\tbeacon.removeSubscriber(ref);\n\t};\n\treturn item;\n};\n\n\nclass ArrayPatcher {\n\t\n\tconstructor(array){\n\t\t\n\t\tthis.changes = new Map;\n\t\tthis.cleanup();\n\t\tif (array) { this.reset(array) };\n\t}\n\t\n\treset(array = []){\n\t\t\n\t\tthis.array = array;\n\t\treturn this.initialLength = array.length;\n\t}\n\t\n\tcleanup(){\n\t\t\n\t\tthis.idx = 0;\n\t\tthis.array = null;\n\t\tthis.changes.clear();\n\t\treturn this.dirty = false;\n\t}\n\t\n\tpush(item){\n\t\t\n\t\tif (this.initialLength == 0) {\n\t\t\t\n\t\t\tif (this.array.indexOf(item) < 0) {\n\t\t\t\t\n\t\t\t\tthis.changes.set(item,1);\n\t\t\t\tthis.array.push(item);\n\t\t\t\tthis.idx++;\n\t\t\t};\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet toReplace = this.array[this.idx];\n\t\t\n\t\t// this only works if things are supposed to go in an array once\n\t\tif (toReplace === item) {\n\t\t\t\n\t\t\treturn ++this.idx;\n\t\t} else {\n\t\t\t\n\t\t\tlet prevIndex = this.array.indexOf(item);\n\t\t\tlet changed = this.changes.get(item);\n\t\t\t\n\t\t\tif (prevIndex === -1) {\n\t\t\t\t\n\t\t\t\tthis.array.splice(this.idx,0,item);\n\t\t\t\tthis.changes.set(item,1);\n\t\t\t\tthis.idx++;\n\t\t\t} else if (prevIndex === this.idx + 1) {\n\t\t\t\t\n\t\t\t\t// if the last one is simply removed\n\t\t\t\tif (toReplace) {\n\t\t\t\t\t\n\t\t\t\t\tthis.changes.set(toReplace,-1);\n\t\t\t\t};\n\t\t\t\tthis.array.splice(this.idx,1);\n\t\t\t\t++this.idx;\n\t\t\t} else if (prevIndex < this.idx) {\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tif (prevIndex > this.idx) {\n\t\t\t\t\t\n\t\t\t\t\tthis.array.splice(prevIndex,1);\n\t\t\t\t};\n\t\t\t\tthis.array.splice(this.idx,0,item);\n\t\t\t};\n\t\t\t\n\t\t\tif (changed == -1) {\n\t\t\t\t\n\t\t\t\treturn this.changes.delete(item);\n\t\t\t};\n\t\t};\n\t}\n\t\n\tend(){\n\t\t\n\t\tif (this.array.length >= this.idx) {\n\t\t\t\n\t\t\twhile (this.array.length > this.idx){\n\t\t\t\t\n\t\t\t\tthis.changes.set(this.array.pop(),-1);\n\t\t\t};\n\t\t};\n\t\treturn this.array;\n\t}\n\t\n\tpatch(){\n\t\t\n\t\treturn this.end();\n\t}\n\tstatic {\n\t\tdefineName$__(this,'ArrayPatcher');}\n};\n\n\nfunction getExtensions(obj){\n\tvar $1, $2;\n\t\n\tlet descriptors = Object.getOwnPropertyDescriptors(obj.prototype);\n\t((($1 = descriptors.name),delete descriptors.name, $1));\n\t((($2 = descriptors.constructor),delete descriptors.constructor, $2));\n\treturn descriptors;\n};\n\nfunction activateHooks(){\n\t\n\tif (!((ACTIVATED != true) ? ((ACTIVATED = true,true)) : false)) { return };\n\t\n\treturn hooks.on('inited',function(instance) {\n\t\t\n\t\tlet meta = instance[METAREF];\n\t\tif (meta) {\n\t\t\t\n\t\t\tlet istag = instance instanceof Node;\n\t\t\tlet obj = instance[OWNREF] ||= {};\n\t\t\tfor (let $3 = 0, $4 = Object.keys(meta), $5 = $4.length, k, v; $3 < $5; $3++){\n\t\t\t\tk = $4[$3];v = meta[k];\n\t\t\t\tlet reaction = obj[k] = new Reaction(instance[k],instance,v);\n\t\t\t\tif (!(istag)) { reaction.call() };\n\t\t\t};\n\t\t\t\n\t\t\tif (istag) {\n\t\t\t\t\n\t\t\t\tlisten(instance,'mount',function() {\n\t\t\t\t\tvar $6;\n\t\t\t\t\t\n\t\t\t\t\t$6 = [];\n\t\t\t\t\tfor (let $7 = 0, $8 = iter$__(Object.values(obj)), $9 = $8.length; $7 < $9; $7++) {\n\t\t\t\t\t\tlet item = $8[$7];\n\t\t\t\t\t\t$6.push((item instanceof Reaction) && item.activate());\n\t\t\t\t\t};\n\t\t\t\t\treturn $6;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tlisten(instance,'unmount',function() {\n\t\t\t\t\tvar $10;\n\t\t\t\t\t\n\t\t\t\t\t$10 = [];\n\t\t\t\t\tfor (let $11 = 0, $12 = iter$__(Object.values(obj)), $13 = $12.length; $11 < $13; $11++) {\n\t\t\t\t\t\tlet item = $12[$11];\n\t\t\t\t\t\t$10.push((item instanceof Reaction) && item.deactivate());\n\t\t\t\t\t};\n\t\t\t\t\treturn $10;\n\t\t\t\t});\n\t\t\t};\n\t\t};\n\t\treturn;\n\t});\n};\n\nfunction getSchema(target,typ = METAREF){\n\t\n\tif (!(target.hasOwnProperty(typ))) {\n\t\t\n\t\ttarget[typ] = Object.assign({},target[typ] || {});\n\t};\n\treturn target[typ];\n};\n\nclass Context {\n\t\n\tconstructor(up,depth = 0){\n\t\t\n\t\tthis.depth = depth;\n\t\tthis.parent = up;\n\t\tthis.target = null;\n\t\tthis.patcher = new ArrayPatcher;\n\t}\n\t\n\tget activeΦ(){\n\t\t\n\t\treturn CTX == this;\n\t}\n\t\n\tget rootΦ(){\n\t\t\n\t\treturn this == ROOT;\n\t}\n\t\n\tget snapshot(){\n\t\t\n\t\tlet all = [];\n\t\tlet item = this[$child$];\n\t\twhile (item && item.target){\n\t\t\t\n\t\t\tall.push({\n\t\t\t\tdepth: item.depth,\n\t\t\t\ttarget: item.target,\n\t\t\t\tbeacon: item.beacon\n\t\t\t});\n\t\t\titem = item[$child$];\n\t\t};\n\t\treturn all;\n\t}\n\t\n\treset(item){\n\t\t\n\t\tthis.tracking = true;\n\t\tthis.target = item;\n\t\tthis.beacon = item.beacon;\n\t\tthis.patcher.reset(item.observing ||= []);// nah to the action\n\t\treturn this;\n\t}\n\t\n\tadd(beacon){\n\t\t\n\t\tif (this.tracking && beacon) { return this.patcher.push(beacon) };\n\t}\n\t\n\treact(reaction){\n\t\t\n\t\treturn ROOT.reactions.add(reaction);\n\t}\n\t\n\tpush(item){\n\t\t\n\t\treturn CTX = this.child.reset(item);\n\t}\n\t\n\tpop(){\n\t\t\n\t\tlet res = null;\n\t\tif (this.beacon) {\n\t\t\t\n\t\t\tres = this.patcher.end();\n\t\t\tlet diff = this.patcher.changes;\n\t\t\tlet changes = diff.size;\n\t\t\t\n\t\t\tif (changes) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (let [item,op] of iter$__(diff)){\n\t\t\t\t\t\n\t\t\t\t\tif (op === 1) {\n\t\t\t\t\t\t\n\t\t\t\t\t\titem.addSubscriber(this.beacon);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\n\t\t\t\t\t\titem.removeSubscriber(this.beacon);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\t\n\t\t// should also clear patcher etc due to memory leaks?\n\t\tthis.patcher.cleanup();\n\t\tthis.target = this.beacon = null;\n\t\tCTX = this.parent;\n\t\tif (CTX == ROOT) {\n\t\t\t\n\t\t\tROOT.flush();\n\t\t};\n\t\treturn res;\n\t}\n\t\n\tget child(){\n\t\t\n\t\treturn this[$child$] ||= new Context(this,this.depth + 1);\n\t}\n\t\n\tget reactions(){\n\t\t\n\t\treturn this[$reactions$] ||= new Set;\n\t}\n\t\n\tflush(){\n\t\t\n\t\tif (!this[$reactions$]) { return };\n\t\tlet items = this[$reactions$];\n\t\tthis[$reactions$] = null;\n\t\tfor (let reaction of iter$__(items)){\n\t\t\t\n\t\t\treaction.call();\n\t\t};\n\t\treturn;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Context');}\n};\n\n\nclass Root extends Context {\n\t\n\t\n\tadd(){\n\t\t\n\t\treturn true;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Root');inheritClass$__(this);}\n};\n\nlet CTX = new Root(null,0);\nlet ROOT = CTX;\n\nlet REACT = function() {\n\t\n\treturn CTX.tracking = false;\n};\n\nlet GET = function(target,key,vsym,meta,bsym) {\n\t\n\tlet val = target[vsym];\n\tlet beacon = target[bsym];\n\t\n\tif (!(beacon)) {\n\t\t\n\t\tbeacon = target[bsym] = new Ref(0,meta,val,key);\n\t};\n\t\n\tCTX.add(beacon,target);\n\treturn val;\n};\n\nlet SET = function(target,key,vsym,value,meta,bsym) {\n\t\n\tlet prev = target[vsym];\n\t\n\tif (value != prev) {\n\t\t\n\t\ttarget[vsym] = value;\n\t\tlet beacon = target[bsym];\n\t\tif (beacon) { beacon.changed(0,value,prev) };\n\t};\n\t\n\treturn;\n};\n\nclass Ref {\n\t\n\t\n\tconstructor(kind,type,val,name){\n\t\t\n\t\tthis.id = NEXT_REF_ID++;\n\t\tthis.observer = null;\n\t\tthis.observers = null;\n\t\t// name = name\n\t\t\n\t\tif (val && val[$$referenced$]) { val[$$referenced$](this) };\n\t\treturn this;\n\t}\n\t\n\tchanged(level,newValue,oldValue){\n\t\t\n\t\tRUN_ID++;\n\t\t// mixing responsibilities with deep observers?\n\t\tif (oldValue && oldValue[$$dereferenced$]) { oldValue[$$dereferenced$](this,newValue) };\n\t\tif (newValue && newValue[$$referenced$]) { newValue[$$referenced$](this,oldValue) };\n\t\t\n\t\t// change is only called here?\n\t\tif (this.observer) { this.observer.invalidated(level + 1,this,newValue,oldValue) };\n\t\t\n\t\tif (this.observers) {\n\t\t\t\n\t\t\tfor (let $14 = 0, $15 = iter$__(this.observers), $16 = $15.length; $14 < $16; $14++) {\n\t\t\t\tlet observer = $15[$14];\n\t\t\t\tobserver.invalidated(level + 1,this,newValue,oldValue);\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (CTX == ROOT) {\n\t\t\t\n\t\t\tCTX.flush();\n\t\t};\n\t\treturn;\n\t}\n\t\n\tinvalidated(level,source){\n\t\t\n\t\tif (this.observer) { this.observer.invalidated(level + 1,this) };\n\t\t\n\t\tif (this.observers) {\n\t\t\t\n\t\t\tfor (let $17 = 0, $18 = iter$__(this.observers), $19 = $18.length; $17 < $19; $17++) {\n\t\t\t\tlet observer = $18[$17];\n\t\t\t\tobserver.invalidated(level + 1,this);\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (level == 0 && CTX == ROOT) {\n\t\t\t\n\t\t\tCTX.flush();\n\t\t};\n\t\treturn true;\n\t}\n\t\n\taddSubscriber(item){\n\t\t\n\t\tif (!(this.observer)) {\n\t\t\t\n\t\t\tthis.observer = item;\n\t\t} else {\n\t\t\t\n\t\t\tthis.observers ||= [];\n\t\t\tthis.observers.push(item);\n\t\t};\n\t\treturn;\n\t}\n\t\n\tremoveSubscriber(item){\n\t\t\n\t\tif (this.observer == item) {\n\t\t\t\n\t\t\treturn this.observer = null;\n\t\t};\n\t\t\n\t\tlet obs = this.observers;\n\t\tlet idx = obs.indexOf(item);\n\t\tif (idx >= 0) {\n\t\t\t\n\t\t\tobs.splice(idx,1);\n\t\t};\n\t\treturn;\n\t}\n\t\n\treportChanged(){\n\t\t\n\t\treturn this.changed(0);\n\t}\n\t\n\treportObserved(){\n\t\t\n\t\treturn CTX.add(this);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Ref');}\n};\n\nexport function createAtom(name){\n\t\n\treturn new Ref(null,null,null,name);\n};\n\n/*\nArray\n*/\n\nclass ObservableArray extends Array {\n\t\n\t\n\tpush(){\n\t\treturn CHANGED(this,super.push(...arguments));\n\t}\n\tpop(){\n\t\treturn CHANGED(this,super.pop(...arguments));\n\t}\n\tunshift(){\n\t\treturn CHANGED(this,super.unshift(...arguments));\n\t}\n\tshift(){\n\t\treturn CHANGED(this,super.shift(...arguments));\n\t}\n\tsplice(){\n\t\treturn CHANGED(this,super.splice(...arguments));\n\t}\n\tat(){\n\t\treturn OBSERVED(this,super.at(...arguments));\n\t}\n\tmap(){\n\t\treturn OBSERVED(this,super.map(...arguments));\n\t}\n\tflatMap(){\n\t\treturn OBSERVED(this,super.flatMap(...arguments));\n\t}\n\tflat(){\n\t\treturn OBSERVED(this,super.flat(...arguments));\n\t}\n\tfilter(){\n\t\treturn OBSERVED(this,super.filter(...arguments));\n\t}\n\tfind(){\n\t\treturn OBSERVED(this,super.find(...arguments));\n\t}\n\tslice(){\n\t\treturn OBSERVED(this,super.slice(...arguments));\n\t}\n\tsort(){\n\t\treturn OBSERVED(this,super.sort(...arguments));\n\t}\n\t\n\tget len(){\n\t\treturn OBSERVED(this,this.length);\n\t}\n\t\n\tset len(value){\n\t\t\n\t\tthis.length = value;\n\t\tCHANGED(this);\n\t}\n\t\n\ttoIterable(){\n\t\t\n\t\tif (TRACKING) { CTX.add(this[OWNREF]) };\n\t\treturn this;\n\t}\n\t\n\t[Symbol.iterator](){\n\t\t\n\t\treturn OBSERVED(this,super[Symbol.iterator](...arguments));\n\t}\n\tstatic {\n\t\tdefineName$__(this,'ObservableArray');inheritClass$__(this);}\n};\n\nconst ArrayExtensions = getExtensions(ObservableArray);\n\nclass ΩArray {\n\t\n\t\n\tget len(){\n\t\t\n\t\treturn this.length;\n\t}\n\t\n\tset len(value){\n\t\t\n\t\tthis.length = value;\n\t}\n\t\n\tget [$$reactive$](){\n\t\treturn REFERENCED(this,null,ArrayExtensions);\n\t}\n\t[$$referenced$](ref){\n\t\treturn REFERENCED(this,ref,ArrayExtensions);\n\t}\n\t[$$dereferenced$](ref){\n\t\treturn DEREFERENCED(this,ref);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Array');}\n};\nextend$__(Array.prototype,ΩArray.prototype);\n;\n\n/*\nSet\n*/\n\nclass ObservableSet extends Set {\n\t\n\thas(){\n\t\treturn OBSERVED(this,super.has(...arguments));\n\t}\n\tkeys(){\n\t\treturn OBSERVED(this,super.keys(...arguments));\n\t}\n\tvalues(){\n\t\treturn OBSERVED(this,super.values(...arguments));\n\t}\n\tentries(){\n\t\treturn OBSERVED(this,super.entries(...arguments));\n\t}\n\t\n\tadd(){\n\t\treturn CHANGED(this,super.add(...arguments));\n\t}\n\tclear(){\n\t\treturn CHANGED(this,super.clear(...arguments));\n\t}\n\tdelete(){\n\t\treturn CHANGED(this,super.delete(...arguments));\n\t}\n\tstatic {\n\t\tdefineName$__(this,'ObservableSet');inheritClass$__(this);}\n};\n\nconst SetExtensions = getExtensions(ObservableSet);\n\nclass ΩSet {\n\t\n\tget [$$reactive$](){\n\t\treturn REFERENCED(this,null,SetExtensions);\n\t}\n\t[$$referenced$](ref){\n\t\treturn REFERENCED(this,ref,SetExtensions);\n\t}\n\t[$$dereferenced$](ref){\n\t\treturn DEREFERENCED(this,ref);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Set');}\n};\nextend$__(Set.prototype,ΩSet.prototype);\n;\n\n/*\nMap\n*/\n\nclass ObservableMap extends Map {\n\t\n\tget(){\n\t\treturn OBSERVED(this,super.get(...arguments));\n\t}\n\thas(){\n\t\treturn OBSERVED(this,super.has(...arguments));\n\t}\n\tkeys(){\n\t\treturn OBSERVED(this,super.keys(...arguments));\n\t}\n\tvalues(){\n\t\treturn OBSERVED(this,super.values(...arguments));\n\t}\n\tentries(){\n\t\treturn OBSERVED(this,super.entries(...arguments));\n\t}\n\t\n\tset(){\n\t\treturn CHANGED(this,super.set(...arguments));\n\t}\n\tclear(){\n\t\treturn CHANGED(this,super.clear(...arguments));\n\t}\n\tdelete(){\n\t\treturn CHANGED(this,super.delete(...arguments));\n\t}\n\tstatic {\n\t\tdefineName$__(this,'ObservableMap');inheritClass$__(this);}\n};\n\nconst MapExtensions = getExtensions(ObservableMap);\n\nclass ΩMap {\n\t\n\tget [$$reactive$](){\n\t\treturn REFERENCED(this,null,MapExtensions);\n\t}\n\t[$$referenced$](ref){\n\t\treturn REFERENCED(this,ref,MapExtensions);\n\t}\n\t[$$dereferenced$](ref){\n\t\treturn DEREFERENCED(this,ref);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Map');}\n};\nextend$__(Map.prototype,ΩMap.prototype);\n;\n\n\n\nclass PropertyType {\n\t\n\tconstructor(name,options = {}){\n\t\tvar self = this;\n\t\t\n\t\tthis.name = name;\n\t\tthis.options = options;\n\t\tconst vkey = this.key = VALUESYM(name);\n\t\tconst bkey = REFSYM(name);\n\t\t\n\t\tlet descriptor = this.descriptor = {\n\t\t\tenumerable: (options.enumerable ?? true),\n\t\t\tconfigurable: false,\n\t\t\tget: function() { return TRACKING ? GET(this,name,vkey,self,bkey) : this[vkey]; },\n\t\t\tset: function(value) {\n\t\t\t\t\n\t\t\t\treturn (TRACKING || !(!(this[bkey]))) ? SET(this,name,vkey,value,self,bkey) : ((this[vkey] = value));\n\t\t\t}\n\t\t};\n\t\t\n\t\tlet lazy = this.lazyDescriptor = {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tget: function() {\n\t\t\t\t\n\t\t\t\tif (TRACKING) {\n\t\t\t\t\t\n\t\t\t\t\tObject.defineProperty(this,name,descriptor);\n\t\t\t\t\treturn this[name];\n\t\t\t\t};\n\t\t\t\t// not if this is the prototype\n\t\t\t\treturn this[vkey];\n\t\t\t},\n\t\t\t\n\t\t\tset: function(value) {\n\t\t\t\t\n\t\t\t\tthis[vkey] = value;\n\t\t\t\tthis[bkey] = null;\n\t\t\t\treturn Object.defineProperty(this,name,descriptor);\n\t\t\t\t// this[bkey] = (value and value.##referenced) ? new Ref(0,self,value) : null\n\t\t\t}\n\t\t};\n\t}\n\tstatic {\n\t\tdefineName$__(this,'PropertyType');}\n};\n\nclass RefIndex {\n\t[$__patch__$]($$ = {}){\n\t\tvar $20;\n\t\t($20 = $$[$map$]) !== undefined && (this[$map$] = $20);\n\t\t\n\t}\n\tconstructor($$ = null){\n\t\tthis[$__init__$]($$);\n\t}\n\t[$__init__$]($$ = null,deep = true){\n\t\tvar $21;\n\t\tthis[$map$] = ($$ && ($21 = $$[$map$]) !== undefined) ? ($21) : (new Map);\n\t\t\n\t}\n\tfor(value){\n\t\t\n\t\tlet res = this[$map$].get(value);\n\t\tif (!(res)) { this[$map$].set(value,res = []) };\n\t\treturn res;\n\t}\n\t\n\tget(value){\n\t\t\n\t\tlet res = this.for(value);\n\t\tlet beacon = res[OWNREF];\n\t\tif (!(beacon)) { res[$$reactive$] };\n\t\tif (TRACKING) { OBSERVED(res) };\n\t\treturn res;\n\t}\n\t\n\tadd(key,member){\n\t\t\n\t\treturn this.for(key).push(member);\n\t}\n\t\n\tdelete(key,member){\n\t\t\n\t\tlet arr = this.for(key);\n\t\tlet idx = arr.indexOf(member);\n\t\tarr.splice(idx,1);\n\t\treturn;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'RefIndex');}\n};\n\nclass RefType {\n\t\n\t\n\tconstructor(name,vkey){\n\t\tvar self = this;\n\t\t\n\t\tthis.name = name;\n\t\tthis.key = vkey;\n\t\tthis.index = new RefIndex;\n\t\t\n\t\tconst bkey = REFSYM(name);\n\t\t\n\t\tlet descriptor = this.descriptor = {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: function() { return TRACKING ? GET(this,name,vkey,self,bkey) : this[vkey]; },\n\t\t\tset: function(value) {\n\t\t\t\t\n\t\t\t\tlet prev = this[vkey];\n\t\t\t\t(TRACKING || !(!(this[bkey]))) ? SET(this,name,vkey,value,self,bkey) : ((this[vkey] = value));\n\t\t\t\tif (prev != value) {\n\t\t\t\t\t\n\t\t\t\t\tif (prev) { self.index.delete(prev,this) };\n\t\t\t\t\tif (value) { return self.index.add(value,this) };\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\t\n\t\tlet lazy = this.lazyDescriptor = {\n\t\t\tset: function(value) {\n\t\t\t\t\n\t\t\t\tthis[vkey] = value;\n\t\t\t\tif (value) { self.index.add(value,this) };\n\t\t\t\tObject.defineProperty(this,name,descriptor);\n\t\t\t\treturn this[bkey] = null;\n\t\t\t\t// (value and value.##referenced) ? new Ref(0,self,value) : null\n\t\t\t}\n\t\t};\n\t}\n\t\n\twhere(value){\n\t\t\n\t\treturn this.index.get(value);\n\t}\n\tstatic {\n\t\tdefineName$__(this,'RefType');}\n};\n\n// why not inherit from beacon?\nclass Memo {\n\t\n\tconstructor(target,func,vkey){\n\t\t\n\t\tthis.observing = null;\n\t\tthis.observers = null;\n\t\tthis.flags = 68;\n\t\tthis.target = target;\n\t\tthis.func = func;\n\t\tthis.vkey = vkey;\n\t\tthis.version = 0;\n\t\t// global.ops.push(self)\n\t\t\n\t}\n\tget beacon(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\taddSubscriber(item){\n\t\t\n\t\tif (!(this.observer)) {\n\t\t\t\n\t\t\tthis.observer = item;\n\t\t} else {\n\t\t\t\n\t\t\tthis.observers ||= [];\n\t\t\tthis.observers.push(item);\n\t\t};\n\t\treturn;\n\t}\n\t\n\tremoveSubscriber(item){\n\t\t\n\t\tif (this.observer == item) {\n\t\t\t\n\t\t\treturn this.observer = null;\n\t\t};\n\t\t\n\t\tlet obs = this.observers;\n\t\tlet idx = obs.indexOf(this);\n\t\tif (idx >= 0) {\n\t\t\t\n\t\t\tobs.splice(idx,1);\n\t\t};\n\t\treturn;\n\t}\n\t\n\tinvalidated(stack,source){\n\t\t\n\t\tthis.flags |= F.STALE | F.POSSIBLY_STALE;\n\t\tif (this.observer) { this.observer.invalidated(stack,this) };\n\t\t\n\t\tif (!(this.observers)) { return };\n\t\tfor (let $22 = 0, $23 = iter$__(this.observers), $24 = $23.length; $22 < $24; $22++) {\n\t\t\tlet observer = $23[$22];\n\t\t\t\n\t\t\t// these are never - they are always computeds\n\t\t\tobserver.invalidated(stack,this);\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t\n\tvalue(){\n\t\t\n\t\tif (TRACKING) { CTX.add(this) };\n\t\t\n\t\tif ((this.flags & F.POSSIBLY_STALE)==0) {\n\t\t\t\n\t\t\treturn this.target[this.vkey];\n\t\t};\n\t\t\n\t\tTRACKING++;\n\t\tthis.flags |= F.RUNNING;\n\t\tCTX.push(this);\n\t\tlet res = this.func.call(this.target);\n\t\tCTX.pop(this);\n\t\tlet prev = this.target[this.vkey];\n\t\tthis.target[this.vkey] = res;\n\t\tthis.flags &= ~(F.STALE | F.POSSIBLY_STALE | F.RUNNING);\n\t\tif (res !== prev) {\n\t\t\t\n\t\t\tthis.version++;\n\t\t};\n\t\tTRACKING--;\n\t\treturn res;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Memo');}\n};\n\nclass ComputedType {\n\t\n\tconstructor(name,func){\n\t\t\n\t\tthis.name = name;\n\t\tconst bkey = REFSYM(name);\n\t\tconst vkey = VALUESYM(name);\n\t\t\n\t\t// could use weakmap for a bit nicer structure I guess.\n\t\tconst descriptor = this.descriptor = {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: false,\n\t\t\tget: function() { return this[bkey].value(); }\n\t\t};\n\t\t\n\t\tconst lazy = this.lazyDescriptor = {\n\t\t\tenumerable: false,\n\t\t\tget: function() {\n\t\t\t\t\n\t\t\t\tlet wrapper = this[bkey] = new Memo(this,func,vkey);\n\t\t\t\tObject.defineProperty(this,name,descriptor);\n\t\t\t\treturn wrapper.value();\n\t\t\t}\n\t\t};\n\t}\n\tstatic {\n\t\tdefineName$__(this,'ComputedType');}\n};\n\nclass Reaction {\n\t\n\t\n\tget beacon(){\n\t\t\n\t\treturn this;\n\t}\n\t\n\tconstructor(cb,context,options = {}){\n\t\t\n\t\tthis.cb = cb;\n\t\tthis.context = context;\n\t\tthis.options = options;\n\t\tthis.flags = 0;\n\t\tthis.id = NEXT_REF_ID++;\n\t\tthis.cachedComputedVersions = new WeakMap;\n\t\tthis.checkComputedValues = new Set;\n\t\tthis.observing = [];\n\t\tthis.timeout = null;\n\t}\n\t\n\tget runningΦ(){\n\t\t\n\t\treturn this.flags & F.RUNNING;\n\t}\n\t\n\tinvalidated(stack,source){\n\t\t\n\t\tif (source instanceof Memo) {\n\t\t\t\n\t\t\tthis.flags |= F.POSSIBLY_STALE;\n\t\t\tthis.checkComputedValues.add(source);\n\t\t} else {\n\t\t\t\n\t\t\tthis.flags |= F.STALE;\n\t\t};\n\t\t\n\t\treturn CTX.react(this);\n\t}\n\t\n\tactivate(){\n\t\t\n\t\tthis.observing = [];\n\t\tthis.cachedComputedVersions = new WeakMap;\n\t\tthis.checkComputedValues = new Set;\n\t\tthis.call();\n\t\treturn this;\n\t}\n\t\n\tdeactivate(){\n\t\t\n\t\tif (this.timeout) { clearTimeout(this.timeout) };\n\t\tif (this.observing) {\n\t\t\t\n\t\t\tfor (let $25 = 0, $26 = iter$__(this.observing), $27 = $26.length; $25 < $27; $25++) {\n\t\t\t\tlet item = $26[$25];\n\t\t\t\titem.removeSubscriber(this);\n\t\t\t};\n\t\t};\n\t\tthis.observing = this.checkComputedValues = this.cachedComputedVersions = null;\n\t\treturn this;\n\t}\n\t\n\tcall(){\n\t\tvar self = this;\n\t\t\n\t\tif (TRACKING) {\n\t\t\t\n\t\t\t// only do this to detect infinite loops somehow?\n\t\t\tconsole.warn('should not call reaction inside an autorunning context?',ROOT.snapshot);\n\t\t\t// this shouldnt _always_ be the case though?\n\t\t\t// return\n\t\t};\n\t\t\n\t\tif (this.flags & F.POSSIBLY_STALE && (this.flags & F.STALE)==0) {\n\t\t\t\n\t\t\tlet stale = false;\n\t\t\tfor (let value of iter$__(this.checkComputedValues)){\n\t\t\t\t\n\t\t\t\tlet v0 = this.cachedComputedVersions.get(value);\n\t\t\t\tvalue.value();\n\t\t\t\tlet v1 = value.version;\n\t\t\t\tif (v0 != v1) {\n\t\t\t\t\t\n\t\t\t\t\tstale = true;break;\n\t\t\t\t};\n\t\t\t};\n\t\t\tif (!(stale)) {\n\t\t\t\t\n\t\t\t\tthis.flags &= ~F.POSSIBLY_STALE;\n\t\t\t\tthis.checkComputedValues.clear();\n\t\t\t\treturn;\n\t\t\t};\n\t\t};\n\t\t\n\t\tif (this.options.delay) {\n\t\t\t\n\t\t\tclearTimeout(this.timeout);\n\t\t\tlet num = this.options.delay;\n\t\t\tif (typeof num != 'number') { num = 1000 };\n\t\t\tthis.timeout = setTimeout(function() { return self.run(); },num);\n\t\t\treturn;\n\t\t};\n\t\treturn this.run();\n\t}\n\t\n\trun(){\n\t\t\n\t\tTRACKING++;\n\t\tthis.flags |= F.RUNNING;\n\t\tlet ctx = CTX.push(this);\n\t\t// let stop\n\t\tlet res = this.cb.call(this.context,REACT);\n\t\tlet beacons = CTX.pop(this);\n\t\t\n\t\tthis.observing = beacons;\n\t\t\n\t\tthis.checkComputedValues.clear();\n\t\tfor (let $28 = 0, $29 = iter$__(beacons), $30 = $29.length; $28 < $30; $28++) {\n\t\t\tlet item = $29[$28];\n\t\t\tif (!((item instanceof Memo))) { continue; };\n\t\t\tthis.cachedComputedVersions.set(item,item.version);\n\t\t};\n\t\t\n\t\tthis.flags &= ~(F.RUNNING | F.STALE | F.POSSIBLY_STALE);\n\t\tTRACKING--;\n\t\t\n\t\tif (true && !(this.options.silent)) { commit() };\n\t\treturn res;\n\t}\n\t\n\tdispose(){\n\t\t\n\t\tthis.deactivate();\n\t\tthis.cb = this.context = this.options = null;\n\t\treturn this;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Reaction');}\n};\n\nclass Awaits extends Reaction {\n\t\n\tresolve(val){\n\t\t\n\t\tthis.deactivate();\n\t\treturn this.resolved = val;\n\t}\n\t\n\tthen(...params){\n\t\tvar self = this;\n\t\t\n\t\t\n\t\tif (this.resolved !== undefined) {\n\t\t\t\n\t\t\treturn Promise.resolve(this.resolved).then(...params);\n\t\t} else {\n\t\t\t\n\t\t\tthis[$promise$] ||= new Promise(function(_resolve) {\n\t\t\t\t\n\t\t\t\treturn self.resolve = function(val) {\n\t\t\t\t\t\n\t\t\t\t\tself.deactivate();\n\t\t\t\t\tself.resolved = val;\n\t\t\t\t\treturn _resolve(val);\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn this[$promise$].then(...params);\n\t\t};\n\t}\n\t\n\trun(){\n\t\t\n\t\tTRACKING++;\n\t\tthis.flags |= F.RUNNING;\n\t\tlet ctx = CTX.push(this);\n\t\t// let stop\n\t\tlet res = this.cb.call(this.context);\n\t\tlet beacons = CTX.pop(this);\n\t\t\n\t\tthis.observing = beacons;\n\t\t\n\t\tthis.checkComputedValues.clear();\n\t\tfor (let $31 = 0, $32 = iter$__(beacons), $33 = $32.length; $31 < $33; $31++) {\n\t\t\tlet item = $32[$31];\n\t\t\tif (!((item instanceof Memo))) { continue; };\n\t\t\tthis.cachedComputedVersions.set(item,item.version);\n\t\t};\n\t\t\n\t\tthis.flags &= ~(F.RUNNING | F.STALE | F.POSSIBLY_STALE);\n\t\tTRACKING--;\n\t\t\n\t\tif (res != false && res != undefined && res != null) {\n\t\t\t\n\t\t\tthis.resolve(res);\n\t\t\tif (true && !(this.options.silent)) { commit() };\n\t\t};\n\t\treturn res;\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Awaits');inheritClass$__(this);}\n};\n\nclass Action {\n\t\n\t\n\tconstructor(cb,context){\n\t\t\n\t\tthis.context = context;\n\t\tthis.cb = cb;\n\t}\n\t\n\trun(ctx = this.context,args = []){\n\t\t\n\t\tCTX.push(this);\n\t\ttry {\n\t\t\t\n\t\t\tlet res = this.cb.apply(ctx,args);\n\t\t\tCTX.pop(this);\n\t\t\treturn res;\n\t\t} catch (e) {\n\t\t\t\n\t\t\tCTX.pop(this);\n\t\t\tthrow e;\n\t\t};\n\t}\n\tstatic {\n\t\tdefineName$__(this,'Action');}\n};\n\nexport function autorun(cb,options = {}){\n\t\n\tlet reaction = new Reaction(cb,globalThis,options);\n\treaction.call();\n\treturn reaction;\n};\n\nexport function awaits(cb,options = {}){\n\t\n\tlet reaction = new Awaits(cb,globalThis,options);\n\treaction.call();\n\treturn reaction;\n};\n\nexport function observable(object){\n\t\n\treturn object[$$reactive$];\n};\n\n\nexport function run(cb){\n\t\n\tlet action = new Action(cb,globalThis);\n\treturn action.run();\n};\n\n\nexport function reportChanged(item){\n\t\n\tif (item && item[OWNREF]) {\n\t\t\n\t\titem[OWNREF].invalidated(0);\n\t};\n\treturn item;\n};\n\nexport function reportObserved(item){\n\t\n\tif (item && item[OWNREF]) {\n\t\t\n\t\titem[OWNREF].reportObserved();\n\t};\n\treturn item;\n};\n\n\nexport function αcomputed(target,name,desc){\n\t\n\tlet sym = METASYM(name);\n\tlet field = target[sym] = new ComputedType(name,desc.get);\n\treturn field.lazyDescriptor;\n};\n\nexport function αobservable(target,key,desc){\n\t\n\tlet sym = METASYM(key);\n\tlet vsym = VALUESYM(key);\n\tlet opts = this[0] || {};\n\tlet field = target[sym] = new PropertyType(key,opts);\n\t\n\tif (desc) {\n\t\t\n\t\tObject.defineProperty(target,vsym,Object.assign({},desc));\n\t\treturn field.lazyDescriptor;\n\t};\n\t\n\tObject.defineProperty(target,key,field.lazyDescriptor);\n\treturn null;\n};\n\nexport function αref(target,name,desc){\n\t\n\tlet sym = METASYM(name);\n\ttarget.constructor[name];\n\tlet field = target[sym] = new RefType(name,VALUESYM(name));\n\treturn field.lazyDescriptor;\n};\n\nexport function αautorun(target,key,desc){\n\t\n\tlet schema = getSchema(target);\n\tlet options = this[0] || {};\n\toptions.flags = F.AUTORUN;\n\tactivateHooks();\n\tschema[key] = options;\n\treturn desc;\n};\n\nexport function αaction(target,key,desc){\n\t\n\tif (desc.value) {\n\t\t\n\t\tlet action = new Action(desc.value,null);\n\t\tdesc.value = function() { return action.run(this,arguments); };\n\t};\n\treturn desc;\n};\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}