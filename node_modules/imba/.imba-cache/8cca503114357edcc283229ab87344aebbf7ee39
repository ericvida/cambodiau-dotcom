{"id":"er","warnings":[],"errors":[],"js":"function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };;\nfunction defineName$__(cls,name){\n\tObject.defineProperty(cls,\"name\",{value:name,configurable:true});\n};;\nfunction inheritClass$__(cls){\n\tObject.getPrototypeOf(cls.prototype).constructor?.inherited?.(cls);\n};\nconst $appendChild$ = Symbol.for('#appendChild'), $insertChild$ = Symbol.for('#insertChild'), $replaceWith$ = Symbol.for('#replaceWith'), $insertInto$ = Symbol.for('#insertInto'), $removeFrom$ = Symbol.for('#removeFrom'), $afterVisit$ = Symbol.for('#afterVisit'), $__initor__$ = Symbol.for('#__initor__'), $__inited__$ = Symbol.for('#__inited__'), $__hooks__$ = Symbol.for('#__hooks__'), $domFlags$ = Symbol.for('#domFlags'), $$parent$ = Symbol.for('##parent'), $end$ = Symbol.for('#end'), $removeChild$ = Symbol.for('#removeChild');\nvar $1 = Symbol();\n\n/*body*/\nimport {createComment} from './core';\nimport {Fragment} from './fragment';\nimport {RenderContext} from './context';\n\nclass KeyedTagFragment extends Fragment {\n\t\n\t\n\tconstructor(f,parent){\n\t\t\n\t\tsuper(...arguments);\n\t\tthis[$domFlags$] = f;\n\t\tthis[$$parent$] = parent;\n\t\tthis.changes = new Map;\n\t\tthis.dirty = false;\n\t\tthis.array = this.childNodes;\n\t\tthis.$ = new RenderContext(this,Symbol());\n\t\t\n\t\tif (!((f & 256))) {\n\t\t\t\n\t\t\tthis[$end$] = createComment('map');\n\t\t\t\n\t\t};\n\t\tif (parent) {\n\t\t\t\n\t\t\tparent[$appendChild$](this);\n\t\t};this[$__initor__$]===$1 && (this[$__hooks__$]&&this[$__hooks__$].inited(this),this[$__inited__$] && this[$__inited__$]());\n\t}\n\t\n\t\n\t[$appendChild$](item){\n\t\t\n\t\tif (this.parentNode) {\n\t\t\t\n\t\t\treturn this.parentNode[$insertChild$](item,this[$end$]);\n\t\t};\n\t}\n\t\n\thasChildNodes(){\n\t\t\n\t\tif (this.childNodes.length == 0) { return false };\n\t\treturn true;\n\t\t\n\t}\n\tpush(item,idx){\n\t\t\n\t\t// on first iteration we can merely run through\n\t\tif (!(this[$domFlags$] & 1)) {\n\t\t\t\n\t\t\t\n\t\t\tthis.array.push(item);\n\t\t\tthis[$appendChild$](item);\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tlet toReplace = this.array[idx];\n\t\t\n\t\tif (toReplace === item) {\n\t\t\t\n\t\t\ttrue;\n\t\t} else {\n\t\t\t\n\t\t\tthis.dirty = true;\n\t\t\t// if this is a new item\n\t\t\tlet prevIndex = this.array.indexOf(item);\n\t\t\tlet changed = this.changes.get(item);\n\t\t\t\n\t\t\tif (prevIndex === -1) {\n\t\t\t\t\n\t\t\t\t// should we mark the one currently in slot as removed?\n\t\t\t\tthis.array.splice(idx,0,item);\n\t\t\t\tthis.insertChild(item,idx,prevIndex);\n\t\t\t} else if (prevIndex === idx + 1) {\n\t\t\t\t\n\t\t\t\tif (toReplace) {\n\t\t\t\t\t\n\t\t\t\t\tthis.changes.set(toReplace,-1);\n\t\t\t\t};\n\t\t\t\tthis.array.splice(idx,1);\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tif (prevIndex >= 0) { this.array.splice(prevIndex,1) };\n\t\t\t\tthis.array.splice(idx,0,item);\n\t\t\t\tthis.moveChild(item,idx,prevIndex);\n\t\t\t};\n\t\t\t\n\t\t\tif (changed == -1) {\n\t\t\t\t\n\t\t\t\tthis.changes.delete(item);\n\t\t\t};\n\t\t};\n\t\treturn;\n\t}\n\t\n\tinsertChild(item,index,prevIndex){\n\t\t\n\t\tlet par = this.parentNode;\n\t\tif (!(par)) { return };\n\t\t\n\t\t// console.log 'insertChild',item,index\n\t\t// log 'insertBefore',index,item,parentNode\n\t\tif (index > 0) {\n\t\t\t\n\t\t\tlet other = this.array[index - 1];\n\t\t\t// will fail with text nodes\n\t\t\tpar[$insertChild$](item,other.nextSibling);\n\t\t} else {\n\t\t\t\n\t\t\tpar[$insertChild$](item,this.childNodes[index + 1] || this[$end$]);\n\t\t};\n\t\treturn;\n\t\t\n\t}\n\tmoveChild(item,index,prevIndex){\n\t\t\n\t\treturn this.insertChild(item,index,prevIndex);\n\t}\n\t\n\tremoveChild(item,index){\n\t\t\n\t\t// self.map.delete(item)\n\t\t// what if this is a fragment or virtual node?\n\t\tif (item.parentNode) {\n\t\t\t\n\t\t\t// log 'removeChild',item,item.parentNode\n\t\t\titem[$removeFrom$](item.parentNode);\n\t\t};\n\t\treturn;\n\t\t\n\t}\n\t[$insertChild$](node,relnode){\n\t\t\n\t\treturn;\n\t\t\n\t}\n\t// def #appendChild\n\t// return\n\t\n\t[$replaceWith$](rel,parent){\n\t\t\n\t\t// console.log 'can replace now?',rel,parent,#end,#end..parentNode\n\t\tlet res = rel[$insertInto$](parent,this[$end$]);\n\t\tthis[$removeFrom$](parent);\n\t\treturn res;\n\t\t\n\t}\n\t[$insertInto$](parent,before){\n\t\t\n\t\t// log 'insertInto',parent,before\n\t\tthis[$$parent$] = parent;\n\t\tlet prev = this.parentNode;\n\t\tif (parent != prev) {\n\t\t\t\n\t\t\tthis.parentNode = parent;\n\t\t\t// #start.#insertInto(parent,before) if #start\n\t\t\tfor (let i = 0, $2 = iter$__(this.array), $3 = $2.length; i < $3; i++) {\n\t\t\t\tlet item = $2[i];\n\t\t\t\titem[$insertInto$](parent,before);\n\t\t\t};\n\t\t\t\n\t\t\tif (this[$end$]) {\n\t\t\t\t\n\t\t\t\tthis[$end$][$insertInto$](parent,before);\n\t\t\t};\n\t\t\t// attachNodes!\n\t\t};\n\t\treturn this;\n\t}\n\t\n\t[$removeFrom$](parent){\n\t\t\n\t\t// log '#removeFrom!',parent\n\t\t\n\t\tfor (let $4 = 0, $5 = iter$__(this.array), $6 = $5.length; $4 < $6; $4++) {\n\t\t\tlet item = $5[$4];\n\t\t\tparent[$removeChild$](item);\n\t\t};\n\t\tif (this[$end$]) { parent[$removeChild$](this[$end$]) };\n\t\t// parent.#removeChild(#start) if #start\n\t\treturn this.parentNode = null;\n\t}\n\t\n\t[$afterVisit$](index){\n\t\tvar self = this;\n\t\t\n\t\tif (!(this[$domFlags$] & 1)) {\n\t\t\t\n\t\t\tthis[$domFlags$] |= 1;\n\t\t\t// what if parent was not even set yet?\n\t\t\treturn;\n\t\t};\n\t\t\n\t\tif (this.dirty) {\n\t\t\t\n\t\t\t// console.log 'was dirty!',array,self.changes\n\t\t\t\n\t\t\tthis.changes.forEach(function(pos,item) {\n\t\t\t\t\n\t\t\t\tif (pos == -1) {\n\t\t\t\t\t\n\t\t\t\t\treturn self.removeChild(item);\n\t\t\t\t};\n\t\t\t});\n\t\t\tthis.changes.clear();\n\t\t\tthis.dirty = false;\n\t\t};\n\t\t\n\t\t// there are some items we should remove now\n\t\tif (this.array.length > index) {\n\t\t\t\n\t\t\t\n\t\t\t// remove the children below\n\t\t\twhile (this.array.length > index){\n\t\t\t\t\n\t\t\t\tlet item = this.array.pop();\n\t\t\t\tthis.removeChild(item);\n\t\t\t};\n\t\t};\n\t\treturn;\n\t}\n\tstatic {\n\t\tthis.prototype[$__initor__$] = $1;defineName$__(this,'KeyedTagFragment');inheritClass$__(this);}\n};\n\nexport function createKeyedList(bitflags,parent){\n\t\n\treturn new KeyedTagFragment(bitflags,parent);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","css":""}